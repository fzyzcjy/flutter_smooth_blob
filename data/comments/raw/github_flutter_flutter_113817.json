{"source": "github", "metadata": {"org": "flutter", "repo": "flutter", "issue": 113817}, "content": {"author": {"login": "fzyzcjy"}, "body": "1. I will finish code details, refine code, add tests, make tests pass, etc, after a code review that thinks the *rough idea* is acceptable. It is because, from my past experience, reviews may request changing a lot. If the general idea is to be changed, all detailed implementation efforts are wasted :)\r\n2. The PR has an already-working counterpart, and it produces ~60FPS smooth experimental results. The benchmark results and detailed analysis is in chapter https://cjycode.com/flutter_smooth/benchmark/. All the source code is in  https://github.com/fzyzcjy/engine/tree/flutter-smooth and https://github.com/fzyzcjy/flutter/tree/flutter-smooth.\r\n3. Possibly useful as a context to this PR, there is a whole chapter discussing the internals - how flutter_smooth is implemented. (Link: https://cjycode.com/flutter_smooth/design/)\r\n\r\n---\r\n\r\nClose https://github.com/flutter/flutter/issues/114002\r\n\r\nWe all know that, Flutter allows us to create our own `BuildOwner` and `PipelineOwner`, and here is even an official example: https://github.com/flutter/flutter/blob/master/examples/api/lib/widgets/framework/build_owner.0.dart. The doc also agrees with that. For example:\r\n\r\n> You can create other pipeline owners to manage off-screen objects, which can flush their pipelines independently of the on-screen render objects. (https://api.flutter.dev/flutter/rendering/PipelineOwner-class.html)\r\n\r\nAnd\r\n\r\n> Additional build owners can be built to manage off-screen widget trees. (https://api.flutter.dev/flutter/widgets/BuildOwner-class.html)\r\n\r\nTherefore, theoretically, we should be able to happily use our own `BuildOwner` and `PipelineOwner` anywhere freely. However, it has a bug as follows: If I call `pipelineOwner.flushPaint();` (and sibling methods) *inside* the layout phase of the main PipelineOwner, then I get an assertion error in debug mode.\r\n\r\nThe root cause is that, even though the self-managed PipelineOwner is isolated from the flutter-managed PipelineOwner, the debug variable `RenderObject.debugActiveLayout` is shared. Therefore, when calling flushPaint on self-manged PipelineOwner within a call of flushLayout of flutter-managed PipelineOwner, the assertions get confused and wrongly throws.\r\n\r\nMy hack can be seen in https://github.com/fzyzcjy/flutter_smooth/blob/0c5db0ff270aa0c8cff28ea19055999627a8df6d/packages/smooth/lib/src/infra/auxiliary_tree_pack.dart#L214. Copy it here for completeness:\r\n\r\n```dart\r\n...\r\n        _temporarilyRemoveDebugActiveLayout(() {\r\n          pipelineOwner.flushPaint();\r\n        });\r\n...\r\n\r\nvoid _temporarilyRemoveDebugActiveLayout(VoidCallback f) {\r\n  // NOTE we have to temporarily remove debugActiveLayout\r\n  // b/c [SecondTreeRootView.paint] is called inside [preemptRender]\r\n  // which is inside main tree's build/layout.\r\n  // thus, if not set it to null we will see error\r\n  // https://github.com/fzyzcjy/yplusplus/issues/5783#issuecomment-1254974511\r\n  // In short, this is b/c [debugActiveLayout] is global variable instead\r\n  // of per-tree variable\r\n  // and also\r\n  // https://github.com/fzyzcjy/yplusplus/issues/5793#issuecomment-1256095858\r\n  final oldDebugActiveLayout = RenderObject.debugActiveLayout;\r\n  RenderObject.debugActiveLayout = null;\r\n  try {\r\n    f();\r\n  } finally {\r\n    RenderObject.debugActiveLayout = oldDebugActiveLayout;\r\n  }\r\n}\r\n```\r\n\r\nHowever, for this to work, the `debugActiveLayout` setter must be public.\r\n\r\nThe most naive solution is to make it public, but that may violate encapsulation. Thus, in the proposed PR, I create a method to wrap that.\r\n\r\n### Reproduction code and output\r\n\r\n<details>\r\n\r\n```dart\r\nimport 'package:flutter/foundation.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter/rendering.dart';\r\nimport 'package:flutter_test/flutter_test.dart';\r\n\r\nvoid main() {\r\n  testWidgets('When call PipelineOwner.flushPaint inside another PipelineOwner.flushLayout', (tester) async {\r\n    int onPerformLayoutCount = 0;\r\n    await tester.pumpWidget(_SpyLayoutBuilder(onPerformLayout: () {\r\n      onPerformLayoutCount++;\r\n\r\n      const Widget widget = ColoredBox(color: Colors.green, child: SizedBox(width: 100, height: 100));\r\n\r\n      // mimic https://github.com/flutter/flutter/blob/master/examples/api/lib/widgets/framework/build_owner.0.dart\r\n      final PipelineOwner pipelineOwner = PipelineOwner();\r\n      final MeasurementView rootView = pipelineOwner.rootNode = MeasurementView();\r\n      final BuildOwner buildOwner = BuildOwner(focusManager: FocusManager());\r\n      final RenderObjectToWidgetElement<RenderBox> element = RenderObjectToWidgetAdapter<RenderBox>(\r\n        container: rootView,\r\n        debugShortDescription: '[root]',\r\n        child: widget,\r\n      ).attachToRenderTree(buildOwner);\r\n\r\n      rootView.scheduleInitialLayout();\r\n      rootView.scheduleInitialPaint(TransformLayer(transform: Matrix4.identity())..attach(rootView));\r\n      buildOwner.buildScope(element);\r\n      pipelineOwner.flushLayout();\r\n      pipelineOwner.flushPaint();\r\n    }));\r\n\r\n    expect(onPerformLayoutCount, 1);\r\n  });\r\n}\r\n\r\nclass MeasurementView extends RenderBox with RenderObjectWithChildMixin<RenderBox> {\r\n  @override\r\n  void performLayout() {\r\n    assert(child != null);\r\n    child!.layout(const BoxConstraints(), parentUsesSize: true);\r\n    size = child!.size;\r\n  }\r\n\r\n  @override\r\n  void paint(PaintingContext context, Offset offset) {\r\n    print('hi ${describeIdentity(this)}.paint');\r\n    context.paintChild(child!, offset);\r\n  }\r\n\r\n  @override\r\n  bool get isRepaintBoundary => true;\r\n\r\n  @override\r\n  Rect get paintBounds => Offset.zero & size;\r\n\r\n  @override\r\n  void debugAssertDoesMeetConstraints() => true;\r\n}\r\n\r\nclass _SpyLayoutBuilder extends SingleChildRenderObjectWidget {\r\n  final VoidCallback onPerformLayout;\r\n\r\n  const _SpyLayoutBuilder({required this.onPerformLayout});\r\n\r\n  @override\r\n  _RenderSpyLayoutBuilder createRenderObject(BuildContext context) => _RenderSpyLayoutBuilder(\r\n        onPerformLayout: onPerformLayout,\r\n      );\r\n\r\n  @override\r\n  void updateRenderObject(BuildContext context, _RenderSpyLayoutBuilder renderObject) {\r\n    renderObject.onPerformLayout = onPerformLayout;\r\n  }\r\n}\r\n\r\nclass _RenderSpyLayoutBuilder extends RenderProxyBox {\r\n  _RenderSpyLayoutBuilder({\r\n    required this.onPerformLayout,\r\n    RenderBox? child,\r\n  }) : super(child);\r\n\r\n  VoidCallback onPerformLayout;\r\n\r\n  @override\r\n  void performLayout() {\r\n    super.performLayout();\r\n    onPerformLayout();\r\n  }\r\n}\r\n```\r\n\r\n</details>\r\n\r\nyields\r\n\r\n<details>\r\n\r\n```shell\r\n00:08 +0: When call PipelineOwner.flushPaint inside another PipelineOwner.flushLayout                                                  \r\n\u2550\u2550\u2561 EXCEPTION CAUGHT BY RENDERING LIBRARY \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\r\nThe following assertion was thrown during performLayout():\r\nRenderBox.size accessed beyond the scope of resize, layout, or permitted parent access. RenderBox\r\ncan always access its own size, otherwise, the only object that is allowed to read RenderBox.size is\r\nits parent, if they have said they will. It you hit this assert trying to access a child's size,\r\npass \"parentUsesSize: true\" to that child's layout().\r\n'package:flutter/src/rendering/box.dart':\r\nFailed assertion: line 2009 pos 13: 'debugDoingThisResize || debugDoingThisLayout ||\r\n_computingThisDryLayout ||\r\n              (RenderObject.debugActiveLayout == parent && size._canBeUsedByParent)'\r\n\r\nEither the assertion indicates an error in the framework itself, or we should provide substantially\r\nmore information in this error message to help you determine and fix the underlying cause.\r\nIn either case, please report this assertion by filing a bug on GitHub:\r\n  https://github.com/flutter/flutter/issues/new?template=2_bug.md\r\n\r\nThe relevant error-causing widget was:\r\n  _SpyLayoutBuilder\r\n  _SpyLayoutBuilder:file:///Users/tom/Main/yplusplus/frontend/yplusplus/test/a.dart:9:29\r\n\r\nWhen the exception was thrown, this was the stack:\r\n#2      RenderBox.size.<anonymous closure> (package:flutter/src/rendering/box.dart:2009:13)\r\n#3      RenderBox.size (package:flutter/src/rendering/box.dart:2022:6)\r\n#4      MeasurementView.paintBounds (file:///Users/tom/Main/yplusplus/frontend/yplusplus/test/a.dart:53:41)\r\n#5      PaintingContext._repaintCompositedChild (package:flutter/src/rendering/object.dart:154:56)\r\n#6      PaintingContext.repaintCompositedChild (package:flutter/src/rendering/object.dart:98:5)\r\n#7      PipelineOwner.flushPaint (package:flutter/src/rendering/object.dart:1116:31)\r\n#8      main.<anonymous closure>.<anonymous closure> (file:///Users/tom/Main/yplusplus/frontend/yplusplus/test/a.dart:28:21)\r\n#9      _RenderSpyLayoutBuilder.performLayout (file:///Users/tom/Main/yplusplus/frontend/yplusplus/test/a.dart:86:20)\r\n#10     RenderObject.layout (package:flutter/src/rendering/object.dart:2135:7)\r\n#11     RenderBox.layout (package:flutter/src/rendering/box.dart:2418:11)\r\n#12     RenderView.performLayout (package:flutter/src/rendering/view.dart:170:14)\r\n#13     RenderObject._layoutWithoutResize (package:flutter/src/rendering/object.dart:1973:7)\r\n#14     PipelineOwner.flushLayout (package:flutter/src/rendering/object.dart:999:18)\r\n#15     AutomatedTestWidgetsFlutterBinding.drawFrame (package:flutter_test/src/binding.dart:1194:23)\r\n#16     RendererBinding._handlePersistentFrameCallback (package:flutter/src/rendering/binding.dart:378:5)\r\n#17     SchedulerBinding._invokeFrameCallback (package:flutter/src/scheduler/binding.dart:1175:15)\r\n#18     SchedulerBinding.handleDrawFrame (package:flutter/src/scheduler/binding.dart:1104:9)\r\n#19     AutomatedTestWidgetsFlutterBinding.pump.<anonymous closure> (package:flutter_test/src/binding.dart:1057:9)\r\n#22     TestAsyncUtils.guard (package:flutter_test/src/test_async_utils.dart:71:41)\r\n#23     AutomatedTestWidgetsFlutterBinding.pump (package:flutter_test/src/binding.dart:1043:27)\r\n#24     WidgetTester.pumpWidget.<anonymous closure> (package:flutter_test/src/widget_tester.dart:554:22)\r\n#27     TestAsyncUtils.guard (package:flutter_test/src/test_async_utils.dart:71:41)\r\n#28     WidgetTester.pumpWidget (package:flutter_test/src/widget_tester.dart:551:27)\r\n#29     main.<anonymous closure> (file:///Users/tom/Main/yplusplus/frontend/yplusplus/test/a.dart:9:18)\r\n#30     testWidgets.<anonymous closure>.<anonymous closure> (package:flutter_test/src/widget_tester.dart:171:29)\r\n<asynchronous suspension>\r\n<asynchronous suspension>\r\n(elided 7 frames from class _AssertionError, dart:async, and package:stack_trace)\r\n\r\nThe following RenderObject was being processed when the exception was fired: _RenderSpyLayoutBuilder#f19a8:\r\n  creator: _SpyLayoutBuilder \u2190 [root]\r\n  parentData: <none>\r\n  constraints: BoxConstraints(w=800.0, h=600.0)\r\n  size: Size(800.0, 600.0)\r\nThis RenderObject has no descendants.\r\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\r\n00:08 +0 -1: When call PipelineOwner.flushPaint inside another PipelineOwner.flushLayout [E]                                           \r\n  Test failed. See exception logs above.\r\n  The test description was: When call PipelineOwner.flushPaint inside another PipelineOwner.flushLayout\r\n  \r\n\r\nTo run this test again: /Users/tom/fvm/versions/3.3.5/bin/cache/dart-sdk/bin/dart test /Users/tom/Main/yplusplus/frontend/yplusplus/test/a.dart -p vm --plain-name 'When call PipelineOwner.flushPaint inside another PipelineOwner.flushLayout'\r\n00:08 +0 -1: Some tests failed.                                  \r\n```\r\n\r\n</details>\r\n\r\n### Performance overhead\r\n\r\nUsing compiler explorer, we can see that it does not generate worse assembly (as long as we use the prefer-inline pragma)\r\n\r\nhttps://godbolt.org/z/EoznoWex7\r\n\r\n![image](https://user-images.githubusercontent.com/5236035/197767410-b9b110cd-584e-4362-b2bf-c9c766ef44e2.png)\r\n\r\n\r\n## Pre-launch Checklist\r\n\r\n- [x] I read the [Contributor Guide] and followed the process outlined there for submitting PRs.\r\n- [x] I read the [Tree Hygiene] wiki page, which explains my responsibilities.\r\n- [x] I read and followed the [Flutter Style Guide], including [Features we expect every widget to implement].\r\n- [x] I signed the [CLA].\r\n- [x] I listed at least one issue that this PR fixes in the description above.\r\n- [x] I updated/added relevant documentation (doc comments with `///`).\r\n- [x] I added new tests to check the change I am making, or this PR is [test-exempt]. -- see above\r\n- [ ] All existing and new tests are passing.\r\n\r\nIf you need help, consider asking for advice on the #hackers-new channel on [Discord].\r\n\r\n<!-- Links -->\r\n[Contributor Guide]: https://github.com/flutter/flutter/wiki/Tree-hygiene#overview\r\n[Tree Hygiene]: https://github.com/flutter/flutter/wiki/Tree-hygiene\r\n[test-exempt]: https://github.com/flutter/flutter/wiki/Tree-hygiene#tests\r\n[Flutter Style Guide]: https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo\r\n[Features we expect every widget to implement]: https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#features-we-expect-every-widget-to-implement\r\n[CLA]: https://cla.developers.google.com/\r\n[flutter/tests]: https://github.com/flutter/tests\r\n[breaking change policy]: https://github.com/flutter/flutter/wiki/Tree-hygiene#handling-breaking-changes\r\n[Discord]: https://github.com/flutter/flutter/wiki/Chat\r\n", "comments": [{"id": "IC_kwDOAeUeuM5Mr0VV", "author": {"login": "flutter-dashboard"}, "authorAssociation": "NONE", "body": "It looks like this pull request may not have tests. Please make sure to add tests before merging. If you need [an exemption](https://github.com/flutter/flutter/wiki/Tree-hygiene#tests) to this rule, contact Hixie on the #hackers channel in [Chat](https://github.com/flutter/flutter/wiki/Chat) (don't just cc him here, he won't see it! *He's on Discord!*).\n\nIf you are not sure if you need tests, consider this rule of thumb: the purpose of a test is to make sure someone doesn't accidentally revert the fix. Ask yourself, **is there anything in your PR that you feel it is important we not accidentally revert back to how it was before your fix?**\n\n__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/wiki/Tree-hygiene#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.", "createdAt": "2022-10-21T07:14:08Z", "includesCreatedEdit": false, "isMinimized": false, "minimizedReason": "", "reactionGroups": [], "url": "https://github.com/flutter/flutter/pull/113817#issuecomment-1286554965"}, {"id": "IC_kwDOAeUeuM5Ncdvn", "author": {"login": "goderbauer"}, "authorAssociation": "MEMBER", "body": "Can you update this PR with the latest master to make sure what is actually changed by this?", "createdAt": "2022-11-01T22:26:45Z", "includesCreatedEdit": false, "isMinimized": false, "minimizedReason": "", "reactionGroups": [], "url": "https://github.com/flutter/flutter/pull/113817#issuecomment-1299307495"}, {"id": "IC_kwDOAeUeuM5NcqIi", "author": {"login": "fzyzcjy"}, "authorAssociation": "CONTRIBUTOR", "body": "Done merging (wait for ci though, but the idea is clear)", "createdAt": "2022-11-01T23:36:33Z", "includesCreatedEdit": false, "isMinimized": false, "minimizedReason": "", "reactionGroups": [], "url": "https://github.com/flutter/flutter/pull/113817#issuecomment-1299358242"}, {"id": "IC_kwDOAeUeuM5NdC3Q", "author": {"login": "fzyzcjy"}, "authorAssociation": "CONTRIBUTOR", "body": "ping :) @caseyhillers, since \r\n\r\n> If you still see failures, feel free to ping a Googler for help. You're welcome to ping me on any PRs (my GitHub is @caseyhillers) and I'll take a look. There's an internal switch to mark it as passing as if rebasing isn't working, it likely indicates a separate PR is causing the failures. https://discord.com/channels/608014603317936148/608018585025118217/1037051780443414628", "createdAt": "2022-11-02T02:05:52Z", "includesCreatedEdit": false, "isMinimized": false, "minimizedReason": "", "reactionGroups": [], "url": "https://github.com/flutter/flutter/pull/113817#issuecomment-1299459536"}, {"id": "IC_kwDOAeUeuM5NdEsj", "author": {"login": "CaseyHillers"}, "authorAssociation": "CONTRIBUTOR", "body": "> ping :) @CaseyHillers\r\n\r\nYou can ignore this failure for now. Google Testing can only run if a Flutter hacker approves your PR. Internally, it says there's no LGTMs, and it marks the status as failed (there's an internal tracking bug for making this status show pending instead of failing)", "createdAt": "2022-11-02T02:16:00Z", "includesCreatedEdit": false, "isMinimized": false, "minimizedReason": "", "reactionGroups": [], "url": "https://github.com/flutter/flutter/pull/113817#issuecomment-1299467043"}, {"id": "IC_kwDOAeUeuM5NdFMC", "author": {"login": "fzyzcjy"}, "authorAssociation": "CONTRIBUTOR", "body": "@CaseyHillers Thanks, get it", "createdAt": "2022-11-02T02:18:49Z", "includesCreatedEdit": false, "isMinimized": false, "minimizedReason": "", "reactionGroups": [], "url": "https://github.com/flutter/flutter/pull/113817#issuecomment-1299469058"}], "createdAt": "2022-10-21T07:14:04Z", "title": "Fix errors when using multiple build/pipeline owners"}}