{"source": "github", "metadata": {"org": "flutter", "repo": "flutter", "issue": 113817}, "content": {"author": {"login": "fzyzcjy"}, "body": "1. I will finish code details, refine code, add tests, make tests pass, etc, after a code review that thinks the *rough idea* is acceptable. It is because, from my past experience, reviews may request changing a lot. If the general idea is to be changed, all detailed implementation efforts are wasted :)\r\n2. The PR has an already-working counterpart, and it produces ~60FPS smooth experimental results. The benchmark results and detailed analysis is in chapter https://cjycode.com/flutter_smooth/benchmark/. All the source code is in  https://github.com/fzyzcjy/engine/tree/flutter-smooth and https://github.com/fzyzcjy/flutter/tree/flutter-smooth.\r\n3. Possibly useful as a context to this PR, there is a whole chapter discussing the internals - how flutter_smooth is implemented. (Link: https://cjycode.com/flutter_smooth/design/)\r\n\r\n---\r\n\r\n\r\n\r\n*This is a tentative PR. I will add tests if after code review.*\r\n\r\nThe current code change is the minimalist since I want to get some feedbacks. If you like, I can propose alternatives. For example, maybe we can create a method like the `_temporarilyRemoveDebugActiveLayout` and make that public instead.\r\n\r\nWe all know that, Flutter allows us to create our own `BuildOwner` and `PipelineOwner`, and here is even an official example: https://github.com/flutter/flutter/blob/master/examples/api/lib/widgets/framework/build_owner.0.dart. The doc also agrees with that. For example:\r\n\r\n> You can create other pipeline owners to manage off-screen objects, which can flush their pipelines independently of the on-screen render objects. (https://api.flutter.dev/flutter/rendering/PipelineOwner-class.html)\r\n\r\nAnd\r\n\r\n> Additional build owners can be built to manage off-screen widget trees. (https://api.flutter.dev/flutter/widgets/BuildOwner-class.html)\r\n\r\nTherefore, theoretically, we should be able to happily use our own `BuildOwner` and `PipelineOwner` anywhere freely. However, it has a bug as follows: If I call `pipelineOwner.flushPaint();` (and sibling methods) *inside* the layout phase of the main PipelineOwner, then I get an assertion error in debug mode.\r\n\r\nThe root cause is that, even though the self-managed PipelineOwner is isolated from the flutter-managed PipelineOwner, the debug variable `RenderObject.debugActiveLayout` is shared. Therefore, when calling flushPaint on self-manged PipelineOwner within a call of flushLayout of flutter-managed PipelineOwner, the assertions get confused and wrongly throws.\r\n\r\nMy hack can be seen in https://github.com/fzyzcjy/flutter_smooth/blob/0c5db0ff270aa0c8cff28ea19055999627a8df6d/packages/smooth/lib/src/infra/auxiliary_tree_pack.dart#L214. Copy it here for completeness:\r\n\r\n```dart\r\n...\r\n        _temporarilyRemoveDebugActiveLayout(() {\r\n          pipelineOwner.flushPaint();\r\n        });\r\n...\r\n\r\nvoid _temporarilyRemoveDebugActiveLayout(VoidCallback f) {\r\n  // NOTE we have to temporarily remove debugActiveLayout\r\n  // b/c [SecondTreeRootView.paint] is called inside [preemptRender]\r\n  // which is inside main tree's build/layout.\r\n  // thus, if not set it to null we will see error\r\n  // https://github.com/fzyzcjy/yplusplus/issues/5783#issuecomment-1254974511\r\n  // In short, this is b/c [debugActiveLayout] is global variable instead\r\n  // of per-tree variable\r\n  // and also\r\n  // https://github.com/fzyzcjy/yplusplus/issues/5793#issuecomment-1256095858\r\n  final oldDebugActiveLayout = RenderObject.debugActiveLayout;\r\n  RenderObject.debugActiveLayout = null;\r\n  try {\r\n    f();\r\n  } finally {\r\n    RenderObject.debugActiveLayout = oldDebugActiveLayout;\r\n  }\r\n}\r\n```\r\n\r\nHowever, for this to work, the `debugActiveLayout` setter must be public.\r\n\r\n\r\n## Pre-launch Checklist\r\n\r\n- [x] I read the [Contributor Guide] and followed the process outlined there for submitting PRs.\r\n- [x] I read the [Tree Hygiene] wiki page, which explains my responsibilities.\r\n- [x] I read and followed the [Flutter Style Guide], including [Features we expect every widget to implement].\r\n- [x] I signed the [CLA].\r\n- [ ] I listed at least one issue that this PR fixes in the description above.\r\n- [x] I updated/added relevant documentation (doc comments with `///`).\r\n- [ ] I added new tests to check the change I am making, or this PR is [test-exempt]. -- see above\r\n- [ ] All existing and new tests are passing.\r\n\r\nIf you need help, consider asking for advice on the #hackers-new channel on [Discord].\r\n\r\n<!-- Links -->\r\n[Contributor Guide]: https://github.com/flutter/flutter/wiki/Tree-hygiene#overview\r\n[Tree Hygiene]: https://github.com/flutter/flutter/wiki/Tree-hygiene\r\n[test-exempt]: https://github.com/flutter/flutter/wiki/Tree-hygiene#tests\r\n[Flutter Style Guide]: https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo\r\n[Features we expect every widget to implement]: https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#features-we-expect-every-widget-to-implement\r\n[CLA]: https://cla.developers.google.com/\r\n[flutter/tests]: https://github.com/flutter/tests\r\n[breaking change policy]: https://github.com/flutter/flutter/wiki/Tree-hygiene#handling-breaking-changes\r\n[Discord]: https://github.com/flutter/flutter/wiki/Chat\r\n", "comments": [{"id": "IC_kwDOAeUeuM5Mr0VV", "author": {"login": "flutter-dashboard"}, "authorAssociation": "NONE", "body": "It looks like this pull request may not have tests. Please make sure to add tests before merging. If you need [an exemption](https://github.com/flutter/flutter/wiki/Tree-hygiene#tests) to this rule, contact Hixie on the #hackers channel in [Chat](https://github.com/flutter/flutter/wiki/Chat) (don't just cc him here, he won't see it! *He's on Discord!*).\n\nIf you are not sure if you need tests, consider this rule of thumb: the purpose of a test is to make sure someone doesn't accidentally revert the fix. Ask yourself, **is there anything in your PR that you feel it is important we not accidentally revert back to how it was before your fix?**\n\n__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/wiki/Tree-hygiene#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.", "createdAt": "2022-10-21T07:14:08Z", "includesCreatedEdit": false, "isMinimized": false, "minimizedReason": "", "reactionGroups": [], "url": "https://github.com/flutter/flutter/pull/113817#issuecomment-1286554965"}], "createdAt": "2022-10-21T07:14:04Z", "title": "Fix errors when using multiple build/pipeline owners"}}