{"source": "github", "metadata": {"org": "flutter", "repo": "flutter", "issue": 114467}, "content": {"author": {"login": "fzyzcjy"}, "body": "Just a small refactor. Using:\r\n\r\n```dart\r\n  set physicalSizeCurrentTestValue(ui.Size value) {\r\n    physicalSizeTestValue = value;\r\n    addTearDown(clearPhysicalSizeTestValue);\r\n  }\r\n```\r\n\r\nWe can make setting physical size test values a bit better in the following two aspects:\r\n\r\n1. Code is less duplicated. Originally need to specify set value + clear value, now only need one call\r\n2. Writing new tests are less error-prone, especially for new learners of Flutter, thus increasing DX. When I firstly learn Flutter, I often wrongly write down set test value calls, *without* the clear value calls. Then the tests works pretty well when isolated, but you know, it fails weirdly when run sequentially because the later tests have wrong physical size. As a new learner of Flutter (years ago), it took me some time before realizing it is this bug. Thus, it would be great to avoid the possibility of such problem from the beginning.\r\n\r\n## Pre-launch Checklist\r\n\r\n- [x] I read the [Contributor Guide] and followed the process outlined there for submitting PRs.\r\n- [x] I read the [Tree Hygiene] wiki page, which explains my responsibilities.\r\n- [x] I read and followed the [Flutter Style Guide], including [Features we expect every widget to implement].\r\n- [x] I signed the [CLA].\r\n- [x] I listed at least one issue that this PR fixes in the description above.\r\n- [x] I updated/added relevant documentation (doc comments with `///`).\r\n- [x] I added new tests to check the change I am making, or this PR is [test-exempt].\r\n- [ ] All existing and new tests are passing.\r\n\r\nIf you need help, consider asking for advice on the #hackers-new channel on [Discord].\r\n\r\n<!-- Links -->\r\n[Contributor Guide]: https://github.com/flutter/flutter/wiki/Tree-hygiene#overview\r\n[Tree Hygiene]: https://github.com/flutter/flutter/wiki/Tree-hygiene\r\n[test-exempt]: https://github.com/flutter/flutter/wiki/Tree-hygiene#tests\r\n[Flutter Style Guide]: https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo\r\n[Features we expect every widget to implement]: https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#features-we-expect-every-widget-to-implement\r\n[CLA]: https://cla.developers.google.com/\r\n[flutter/tests]: https://github.com/flutter/tests\r\n[breaking change policy]: https://github.com/flutter/flutter/wiki/Tree-hygiene#handling-breaking-changes\r\n[Discord]: https://github.com/flutter/flutter/wiki/Chat\r\n", "comments": [{"id": "IC_kwDOAeUeuM5NvpWV", "author": {"login": "fzyzcjy"}, "authorAssociation": "CONTRIBUTOR", "body": "> Secondly, I think having two similarly named setters, one that cleans up after itself and one that doesn't, is still pretty unintuitive for developers. There is still a lot of potential for making a mistake, say by accidentally setting physicalSizeTestValue instead of physicalSizeCurrentTestValue and expecting it to automatically do clearPhysicalSizeTestValue.\r\n\r\nWhat about renaming it to: physicalSizeTestValue vs physicalSizeTestValueAutoClear? Then nobody can use it by mistake since the latter says \"auto clear\"", "createdAt": "2022-11-04T23:32:41Z", "includesCreatedEdit": false, "isMinimized": false, "minimizedReason": "", "reactionGroups": [{"content": "THUMBS_UP", "users": {"totalCount": 1}}], "url": "https://github.com/flutter/flutter/pull/114467#issuecomment-1304335765"}, {"id": "IC_kwDOAeUeuM5N2aEH", "author": {"login": "pdblasi-google"}, "authorAssociation": "CONTRIBUTOR", "body": "I like the goal of this (easier tests, less likely to make mistakes), but I have a couple of concerns with this as implemented:\r\n\r\n1. Does this _hide_ a problem, rather than addressing it?\r\n    * It's pretty common that `addTearDown` and `tearDown` calls are missed as you pointed out in your description. This PR makes it easier to not miss those calls for a few specific cases, but it doesn't really address _why_ those calls are missed or drive users to write better tests in other cases.\r\n2. Does adding these methods here set a standard that the testing framework will be expected to stick to elsewhere?\r\n    * How do we determine which properties or fields should/shouldn't have versions that auto clear?\r\n    * How should adding those auto clear versions be prioritized?\r\n    * If/when those versions break, should it be considered a breaking change and should the breaking change process be followed for just the auto clear version, or for auto clear and standard versions?\r\n3. Will this cause unintuitive behavior in other use cases?\r\n    * Specifically I'm thinking of someone trying to use this for setting up a `group` of tests. Since this makes use of `addTearDown`, it'll only behave as expected for individual tests. If someone tries to use the \"AutoClear\" version in a group, it'll throw an exception.\r\n    * In combination with number 2, would any \"AutoClear\" versions also need an \"AutoClearGroup\" version?\r\n\r\nPersonally, I'd lean towards pushing the convenience method part to a separate package where the expectations for support, maintenance, and coverage won't be as high. It'd also allow for more community contributions for different conveniences and extensions to be added without needing to go through as much process as this repo requires. As for the fixes to our own tests, it's a great catch and should be included, but IMO without using the convenience method.", "createdAt": "2022-11-07T19:51:34Z", "includesCreatedEdit": false, "isMinimized": false, "minimizedReason": "", "reactionGroups": [], "url": "https://github.com/flutter/flutter/pull/114467#issuecomment-1306108167"}, {"id": "IC_kwDOAeUeuM5N3YYP", "author": {"login": "fzyzcjy"}, "authorAssociation": "CONTRIBUTOR", "body": "@Renzo-Olivares @justinmc done :)", "createdAt": "2022-11-07T23:24:50Z", "includesCreatedEdit": false, "isMinimized": false, "minimizedReason": "", "reactionGroups": [], "url": "https://github.com/flutter/flutter/pull/114467#issuecomment-1306363407"}, {"id": "IC_kwDOAeUeuM5N3adC", "author": {"login": "fzyzcjy"}, "authorAssociation": "CONTRIBUTOR", "body": "@pdblasi-google \r\n\r\n> Does this hide a problem, rather than addressing it?\r\nIt's pretty common that addTearDown and tearDown calls are missed as you pointed out in your description. This PR makes it easier to not miss those calls for a few specific cases, but it doesn't really address why those calls are missed or drive users to write better tests in other cases.\r\n\r\nSo what do you think is the reason \"why those calls are missed\"? I indeed am not sure - maybe because they just forget?\r\n\r\n> Does adding these methods here set a standard that the testing framework will be expected to stick to elsewhere?\r\nHow do we determine which properties or fields should/shouldn't have versions that auto clear?\r\n\r\nFor fields that have a `set somethingTestValue` and `clearSomethingTestValue` I guess?\r\n\r\n> How should adding those auto clear versions be prioritized?\r\n\r\nIMHO this is quite trivial to implement (if you like I can submit more)\r\n\r\n> If/when those versions break, should it be considered a breaking change and should the breaking change process be followed for just the auto clear version, or for auto clear and standard versions?\r\n\r\nSorry, not sure about the question\r\n\r\n> Will this cause unintuitive behavior in other use cases?\r\nSpecifically I'm thinking of someone trying to use this for setting up a group of tests. Since this makes use of addTearDown, it'll only behave as expected for individual tests. If someone tries to use the \"AutoClear\" version in a group, it'll throw an exception.\r\nIn combination with number 2, would any \"AutoClear\" versions also need an \"AutoClearGroup\" version?\r\n\r\nLuckily, not a problem! If you like I can put the following code which automatically uses addTearDown vs tearDown and is used internally in my app:\r\n\r\n```dart\r\nvoid autoSetUpTearDownOrAddTearDownSync(\r\n  void Function() setUpBody,\r\n  void Function() tearDownBody,\r\n) {\r\n  // ref: test_api :: test_structure.dart :: addTearDown\r\n  // `Invoker.current==null` will lead to a message `addTearDown() may only be called within a test.`\r\n  // so use this to determine whether in test\r\n  if (Invoker.current == null) {\r\n    setUp(setUpBody);\r\n    tearDown(tearDownBody);\r\n  } else {\r\n    setUpBody();\r\n    addTearDown(tearDownBody);\r\n  }\r\n}\r\n```", "createdAt": "2022-11-07T23:31:54Z", "includesCreatedEdit": false, "isMinimized": false, "minimizedReason": "", "reactionGroups": [], "url": "https://github.com/flutter/flutter/pull/114467#issuecomment-1306371906"}, {"id": "IC_kwDOAeUeuM5N9Ebu", "author": {"login": "pdblasi-google"}, "authorAssociation": "CONTRIBUTOR", "body": "@fzyzcjy\r\n\r\nPersonally, I think those calls are missed because they aren't made obvious to users through documentation and examples.  As such, I'm not sure hiding those calls behind convenience methods promotes better usage of those methods.\r\n\r\nAdding the convenience methods _also_ increases our API surface, which increases our maintenance burden, and sets up expectations for other parts of the testing framework that don't actually _solve_ the problem of those methods being missed, but instead makes it even less likely that users will run into an example using them correctly.\r\n\r\nLong story short, I don't think the convenience methods are worth the long term cost of introducing that pattern to the framework. Hence suggesting creating a package for them, where the maintenance costs and coverage expectations are going to be lower.\r\n\r\nIt's also worth noting that there's work at the moment to move from a single window to multiple views (to support desktop better), which may be a great opportunity to improve on these particular fields' APIs from the ground up. I believe @goderbauer is driving that initiative, though he's out until next Tuesday.", "createdAt": "2022-11-08T21:31:57Z", "includesCreatedEdit": false, "isMinimized": false, "minimizedReason": "", "reactionGroups": [], "url": "https://github.com/flutter/flutter/pull/114467#issuecomment-1307854574"}, {"id": "IC_kwDOAeUeuM5N9Tug", "author": {"login": "fzyzcjy"}, "authorAssociation": "CONTRIBUTOR", "body": "@pdblasi-google \r\n\r\n> Personally, I think those calls are missed because they aren't made obvious to users through documentation and examples.\r\n\r\nNot sure how other people do, but I am not this case personally. I have this simply because I forgot to call the clear :/ I do vaguely remember the clear, and if you test me in a questionaire I will remember it, but when programming I just set the value - doing the minimal necessary work - while forgetting the clear.\r\n\r\n> Hence suggesting creating a package for them\r\n\r\nThen what should we do for the flutter framework itself? Or shall we mark them `@internal` so flutter framework can use it?\r\n\r\n> It's also worth noting that there's work at the moment to move from a single window to multiple views (to support desktop better), which may be a great opportunity to improve on these particular fields' APIs from the ground up. I believe @goderbauer is driving that initiative, though he's out until next Tuesday.\r\n\r\nLooks interesting!", "createdAt": "2022-11-08T22:25:29Z", "includesCreatedEdit": false, "isMinimized": false, "minimizedReason": "", "reactionGroups": [], "url": "https://github.com/flutter/flutter/pull/114467#issuecomment-1307917216"}, {"id": "IC_kwDOAeUeuM5N9XkU", "author": {"login": "pdblasi-google"}, "authorAssociation": "CONTRIBUTOR", "body": "If the convenience methods are moved to a package, I would suggest just not using them in the flutter repo and updating the tests here to use the `addTearDown` methods where appropriate to clear the values. That way, those tests can serve as an example of how to use the standard `addTearDown` pattern.", "createdAt": "2022-11-08T22:37:43Z", "includesCreatedEdit": false, "isMinimized": false, "minimizedReason": "", "reactionGroups": [], "url": "https://github.com/flutter/flutter/pull/114467#issuecomment-1307932948"}, {"id": "IC_kwDOAeUeuM5N9YqS", "author": {"login": "fzyzcjy"}, "authorAssociation": "CONTRIBUTOR", "body": "> not using them in the flutter repo*\r\n\r\nThen the tests are not DRY ;)", "createdAt": "2022-11-08T22:43:07Z", "includesCreatedEdit": false, "isMinimized": false, "minimizedReason": "", "reactionGroups": [], "url": "https://github.com/flutter/flutter/pull/114467#issuecomment-1307937426"}, {"id": "IC_kwDOAeUeuM5N9bpF", "author": {"login": "pdblasi-google"}, "authorAssociation": "CONTRIBUTOR", "body": "> Then the tests are not DRY ;)\r\n\r\nI mean, if you want to get the tests _really_ DRY, then the setup/teardown would be moved out to the `group` level and done either once for the entire group, or set up to happen before and after each test with the group level methods.\r\n\r\nSince we're working on a public API though, we don't necessarily _want_ to be DRY on everything. We have to balance trying to keep our internal stuff as clean as we can with not making the API too specific to our internal use cases.", "createdAt": "2022-11-08T22:58:52Z", "includesCreatedEdit": false, "isMinimized": false, "minimizedReason": "", "reactionGroups": [], "url": "https://github.com/flutter/flutter/pull/114467#issuecomment-1307949637"}, {"id": "IC_kwDOAeUeuM5N9cQb", "author": {"login": "fzyzcjy"}, "authorAssociation": "CONTRIBUTOR", "body": "> then the setup/teardown would be moved out to the group level and done either once for the entire group\r\n\r\nWell, those tests are not in the same file, so IMHO they cannot be solved by `group`.\r\n\r\n> Since we're working on a public API though, we don't necessarily want to be DRY on everything. We have to balance trying to keep our internal stuff as clean as we can with not making the API too specific to our internal use cases.\r\n\r\nI see. Btw, it is not \"too specific to our internal use cases\" as it is used everyday by external users", "createdAt": "2022-11-08T23:01:58Z", "includesCreatedEdit": false, "isMinimized": false, "minimizedReason": "", "reactionGroups": [], "url": "https://github.com/flutter/flutter/pull/114467#issuecomment-1307952155"}], "createdAt": "2022-11-02T01:44:28Z", "title": "Refactor usages of `physicalSizeTestValue` to simplify code and improve DX"}}