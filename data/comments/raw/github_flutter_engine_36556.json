{"source": "github", "metadata": {"org": "flutter", "repo": "engine", "issue": 36556}, "content": {"author": {"login": "fzyzcjy"}, "body": "Original comment:\r\n\r\n> ... So we flatten the layer tree into a picture and use that as the thread transport mechanism.\r\n\r\nHowever, looking at the whole code:\r\n\r\n<details>\r\n\r\n```c++\r\nDart_Handle Picture::RasterizeToImage(sk_sp<DisplayList> display_list,\r\n                                      std::shared_ptr<LayerTree> layer_tree,\r\n                                      uint32_t width,\r\n                                      uint32_t height,\r\n                                      Dart_Handle raw_image_callback) {\r\n  if (Dart_IsNull(raw_image_callback) || !Dart_IsClosure(raw_image_callback)) {\r\n    return tonic::ToDart(\"Image callback was invalid\");\r\n  }\r\n\r\n  if (width == 0 || height == 0) {\r\n    return tonic::ToDart(\"Image dimensions for scene were invalid.\");\r\n  }\r\n\r\n  auto* dart_state = UIDartState::Current();\r\n  auto image_callback = std::make_unique<tonic::DartPersistentValue>(\r\n      dart_state, raw_image_callback);\r\n  auto unref_queue = dart_state->GetSkiaUnrefQueue();\r\n  auto ui_task_runner = dart_state->GetTaskRunners().GetUITaskRunner();\r\n  auto raster_task_runner = dart_state->GetTaskRunners().GetRasterTaskRunner();\r\n  auto snapshot_delegate = dart_state->GetSnapshotDelegate();\r\n\r\n  // We can't create an image on this task runner because we don't have a\r\n  // graphics context. Even if we did, it would be slow anyway. Also, this\r\n  // thread owns the sole reference to the layer tree. So we flatten the layer\r\n  // tree into a picture and use that as the thread transport mechanism.\r\n\r\n  auto picture_bounds = SkISize::Make(width, height);\r\n\r\n  auto ui_task =\r\n      // The static leak checker gets confused by the use of fml::MakeCopyable.\r\n      // NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks)\r\n      fml::MakeCopyable([image_callback = std::move(image_callback),\r\n                         unref_queue](sk_sp<DlImage> image) mutable {\r\n        auto dart_state = image_callback->dart_state().lock();\r\n        if (!dart_state) {\r\n          // The root isolate could have died in the meantime.\r\n          return;\r\n        }\r\n        tonic::DartState::Scope scope(dart_state);\r\n\r\n        if (!image) {\r\n          tonic::DartInvoke(image_callback->Get(), {Dart_Null()});\r\n          return;\r\n        }\r\n\r\n        if (image->skia_image()) {\r\n          image =\r\n              DlImageGPU::Make({image->skia_image(), std::move(unref_queue)});\r\n        }\r\n\r\n        auto dart_image = CanvasImage::Create();\r\n        dart_image->set_image(image);\r\n        auto* raw_dart_image = tonic::ToDart(std::move(dart_image));\r\n\r\n        // All done!\r\n        tonic::DartInvoke(image_callback->Get(), {raw_dart_image});\r\n\r\n        // image_callback is associated with the Dart isolate and must be\r\n        // deleted on the UI thread.\r\n        image_callback.reset();\r\n      });\r\n\r\n  // Kick things off on the raster rask runner.\r\n  fml::TaskRunner::RunNowOrPostTask(\r\n      raster_task_runner,\r\n      [ui_task_runner, snapshot_delegate, display_list, picture_bounds, ui_task,\r\n       layer_tree = std::move(layer_tree)] {\r\n        sk_sp<DlImage> image;\r\n        if (layer_tree) {\r\n          auto display_list = layer_tree->Flatten(\r\n              SkRect::MakeWH(picture_bounds.width(), picture_bounds.height()),\r\n              snapshot_delegate->GetTextureRegistry(),\r\n              snapshot_delegate->GetGrContext());\r\n\r\n          image = snapshot_delegate->MakeRasterSnapshot(display_list,\r\n                                                        picture_bounds);\r\n        } else {\r\n          image = snapshot_delegate->MakeRasterSnapshot(display_list,\r\n                                                        picture_bounds);\r\n        }\r\n\r\n        fml::TaskRunner::RunNowOrPostTask(\r\n            ui_task_runner, [ui_task, image]() { ui_task(image); });\r\n      });\r\n\r\n  return Dart_Null();\r\n}\r\n```\r\n\r\n</details>\r\n\r\nIt seems that, the `layer_tree` is directly moved into `raster_task_runner` callbacks. Then, inside the raster thread, `layer_tree->Flatten` is called and it is converted to a DisplayList. In other words, the \"thread transport mechanism\" seems to be the `layer_tree` (ui -> raster thread) and `DlImage` (raster -> ui thread), instead of the \"flatten the layer tree into a picture and use that\" (the flattened layer tree, i.e. the picture).\r\n\r\n*List which issues are fixed by this PR. You must list at least one issue.*\r\n\r\n*If you had to change anything in the [flutter/tests] repo, include a link to the migration guide as per the [breaking change policy].*\r\n\r\n## Pre-launch Checklist\r\n\r\n- [x] I read the [Contributor Guide] and followed the process outlined there for submitting PRs.\r\n- [x] I read the [Tree Hygiene] wiki page, which explains my responsibilities.\r\n- [x] I read and followed the [Flutter Style Guide] and the [C++, Objective-C, Java style guides].\r\n- [ ] I listed at least one issue that this PR fixes in the description above.\r\n- [x] I added new tests to check the change I am making or feature I am adding, or Hixie said the PR is test-exempt. See [testing the engine] for instructions on\r\nwriting and running engine tests.\r\n- [x] I updated/added relevant documentation (doc comments with `///`).\r\n- [x] I signed the [CLA].\r\n- [ ] All existing and new tests are passing.\r\n\r\nIf you need help, consider asking for advice on the #hackers-new channel on [Discord].\r\n\r\n<!-- Links -->\r\n[Contributor Guide]: https://github.com/flutter/flutter/wiki/Tree-hygiene#overview\r\n[Tree Hygiene]: https://github.com/flutter/flutter/wiki/Tree-hygiene\r\n[Flutter Style Guide]: https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo\r\n[C++, Objective-C, Java style guides]: https://github.com/flutter/engine/blob/main/CONTRIBUTING.md#style\r\n[testing the engine]: https://github.com/flutter/flutter/wiki/Testing-the-engine\r\n[CLA]: https://cla.developers.google.com/\r\n[flutter/tests]: https://github.com/flutter/tests\r\n[breaking change policy]: https://github.com/flutter/flutter/wiki/Tree-hygiene#handling-breaking-changes\r\n[Discord]: https://github.com/flutter/flutter/wiki/Chat\r\n", "comments": [{"id": "IC_kwDOAlZRSc5LXxlu", "author": {"login": "flutter-dashboard"}, "authorAssociation": "NONE", "body": "It looks like this pull request may not have tests. Please make sure to add tests before merging. If you need [an exemption](https://github.com/flutter/flutter/wiki/Tree-hygiene#tests) to this rule, contact Hixie on the #hackers channel in [Chat](https://github.com/flutter/flutter/wiki/Chat) (don't just cc him here, he won't see it! *He's on Discord!*).\n\nIf you are not sure if you need tests, consider this rule of thumb: the purpose of a test is to make sure someone doesn't accidentally revert the fix. Ask yourself, **is there anything in your PR that you feel it is important we not accidentally revert back to how it was before your fix?**\n\n__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/wiki/Tree-hygiene#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.", "createdAt": "2022-10-02T01:33:30Z", "includesCreatedEdit": false, "isMinimized": false, "minimizedReason": "", "reactionGroups": [], "url": "https://github.com/flutter/engine/pull/36556#issuecomment-1264523630"}, {"id": "IC_kwDOAlZRSc5LXxnW", "author": {"login": "fzyzcjy"}, "authorAssociation": "CONTRIBUTOR", "body": "This only updates comments so seems no need for tests", "createdAt": "2022-10-02T01:34:31Z", "includesCreatedEdit": false, "isMinimized": false, "minimizedReason": "", "reactionGroups": [], "url": "https://github.com/flutter/engine/pull/36556#issuecomment-1264523734"}, {"id": "IC_kwDOAlZRSc5MRMTa", "author": {"login": "fzyzcjy"}, "authorAssociation": "CONTRIBUTOR", "body": "> This is an artifact of what the code used to do, but it has since been refactored to not do that :)\r\n\r\nI guess so :) That is why I update it - otherwise it will mislead future readers", "createdAt": "2022-10-14T23:08:45Z", "includesCreatedEdit": false, "isMinimized": false, "minimizedReason": "", "reactionGroups": [], "url": "https://github.com/flutter/engine/pull/36556#issuecomment-1279575258"}], "createdAt": "2022-10-02T01:33:27Z", "title": "Update comments that seem to contradict the code and may confuse the reader"}}