{"source": "github", "metadata": {"org": "flutter", "repo": "engine", "issue": 36921}, "content": {"author": {"login": "fzyzcjy"}, "body": "1. I will finish code details, refine code, add tests, make tests pass, etc, after a code review that thinks the *rough idea* is acceptable. It is because, from my past experience, reviews may request changing a lot. If the general idea is to be changed, all detailed implementation efforts are wasted :)\r\n2. The PR has an already-working counterpart, and it produces ~60FPS smooth experimental results. The benchmark results and detailed analysis is in chapter https://cjycode.com/flutter_smooth/benchmark/. All the source code is in  https://github.com/fzyzcjy/engine/tree/flutter-smooth and https://github.com/fzyzcjy/flutter/tree/flutter-smooth.\r\n3. Possibly useful as a context to this PR, there is a whole chapter discussing the internals - how flutter_smooth is implemented. (Link: https://cjycode.com/flutter_smooth/design/)\r\n\r\n---\r\n\r\n\r\nThis PR depends on the merging of https://github.com/flutter/engine/pull/36911.\r\n\r\nThis PR is needed by flutter_smooth, because of the \"Brake\" mechanism discussed in https://github.com/fzyzcjy/flutter_smooth/blob/feat%2Fdoc-insight/website/docs/design/infra/brake/intro.md (TODO@fzyzcjy: post website link when it is published). In short, for that mechanism to work without jank, a frame must be able to be started immediately instead of waiting for the next vsync (otherwise we must have a jank).\r\n\r\nMore specifically, let's analyze the figure in the Brake mechanism. The red arrow points where we need this PR. If this PR is not there, the frame cannot start at time=2.6, but have to start at time=3. Then, even though we have preempt render mechanism, we are not able to produce scene and rasterizer quick enough before time=4, so we will have a jank.\r\n\r\n![image](https://user-images.githubusercontent.com/5236035/197199138-74d1c21a-0839-4c21-94bb-2e0774b8b22e.png)\r\n\r\n\r\n## Pre-launch Checklist\r\n\r\n- [x] I read the [Contributor Guide] and followed the process outlined there for submitting PRs.\r\n- [x] I read the [Tree Hygiene] wiki page, which explains my responsibilities.\r\n- [x] I read and followed the [Flutter Style Guide] and the [C++, Objective-C, Java style guides].\r\n- [x] I listed at least one issue that this PR fixes in the description above.\r\n- [x] I added new tests to check the change I am making or feature I am adding, or Hixie said the PR is test-exempt. See [testing the engine] for instructions on \r\nwriting and running engine tests. -- see above\r\n- [x] I updated/added relevant documentation (doc comments with `///`).\r\n- [x] I signed the [CLA].\r\n- [x] All existing and new tests are passing.\r\n\r\nIf you need help, consider asking for advice on the #hackers-new channel on [Discord].\r\n\r\n<!-- Links -->\r\n[Contributor Guide]: https://github.com/flutter/flutter/wiki/Tree-hygiene#overview\r\n[Tree Hygiene]: https://github.com/flutter/flutter/wiki/Tree-hygiene\r\n[Flutter Style Guide]: https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo\r\n[C++, Objective-C, Java style guides]: https://github.com/flutter/engine/blob/main/CONTRIBUTING.md#style\r\n[testing the engine]: https://github.com/flutter/flutter/wiki/Testing-the-engine\r\n[CLA]: https://cla.developers.google.com/\r\n[flutter/tests]: https://github.com/flutter/tests\r\n[breaking change policy]: https://github.com/flutter/flutter/wiki/Tree-hygiene#handling-breaking-changes\r\n[Discord]: https://github.com/flutter/flutter/wiki/Chat\r\n", "comments": [{"id": "IC_kwDOAlZRSc5MtM7g", "author": {"login": "flutter-dashboard"}, "authorAssociation": "NONE", "body": "It looks like this pull request may not have tests. Please make sure to add tests before merging. If you need [an exemption](https://github.com/flutter/flutter/wiki/Tree-hygiene#tests) to this rule, contact Hixie on the #hackers channel in [Chat](https://github.com/flutter/flutter/wiki/Chat) (don't just cc him here, he won't see it! *He's on Discord!*).\n\nIf you are not sure if you need tests, consider this rule of thumb: the purpose of a test is to make sure someone doesn't accidentally revert the fix. Ask yourself, **is there anything in your PR that you feel it is important we not accidentally revert back to how it was before your fix?**\n\n__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/wiki/Tree-hygiene#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.", "createdAt": "2022-10-21T12:48:35Z", "includesCreatedEdit": false, "isMinimized": false, "minimizedReason": "", "reactionGroups": [], "url": "https://github.com/flutter/engine/pull/36921#issuecomment-1286917856"}, {"id": "IC_kwDOAlZRSc5NIqhq", "author": {"login": "dnfield"}, "authorAssociation": "MEMBER", "body": "Same comment as on the linked PR applies.\r\n\r\nIn particular, it's really hard to reason about how to use this parameter correctly. A lot of the work you're doing seems to be geared towards ignoring/overriding the vsync that the system gives us instead of cooperating with it more. \r\n\r\nIn particular, *vsync is an important source of backpressure that we must respect*. We cannot just keep shoving frames at the system compositor, we will overwhelm it and it will start dropping more frames than necessary/run into long GPU stalls. This will be really bad on older hardware, and still be bad on newer hardware.", "createdAt": "2022-10-27T21:50:28Z", "includesCreatedEdit": false, "isMinimized": false, "minimizedReason": "", "reactionGroups": [], "url": "https://github.com/flutter/engine/pull/36921#issuecomment-1294116970"}, {"id": "IC_kwDOAlZRSc5NJFbw", "author": {"login": "fzyzcjy"}, "authorAssociation": "CONTRIBUTOR", "body": "@dnfield I see\r\n\r\n> We cannot just keep shoving frames at the system compositor, we will overwhelm it and it will start dropping more frames than necessary/run into long GPU stalls. This will be really bad on older hardware, and still be bad on newer hardware.\r\n\r\nMay I know a bit more details?\r\n\r\nBy the way, this PR does not shoving too many frames. Indeed, it has one and exactly one rasterization ending (i.e. submit data to OS) in each vsync interval. Thus, it behaves exactly the same as a super-smooth app, which also provide one and exactly one data to system per vsync interval.", "createdAt": "2022-10-27T23:23:50Z", "includesCreatedEdit": false, "isMinimized": false, "minimizedReason": "", "reactionGroups": [], "url": "https://github.com/flutter/engine/pull/36921#issuecomment-1294227184"}, {"id": "IC_kwDOAlZRSc5NM0ek", "author": {"login": "dnfield"}, "authorAssociation": "MEMBER", "body": "What happens when an application decicdes to just repeatedly call this method? How does it know that it's only called it once per vsync? ", "createdAt": "2022-10-28T16:35:25Z", "includesCreatedEdit": false, "isMinimized": false, "minimizedReason": "", "reactionGroups": [], "url": "https://github.com/flutter/engine/pull/36921#issuecomment-1295206308"}, {"id": "IC_kwDOAlZRSc5NOdpO", "author": {"login": "fzyzcjy"}, "authorAssociation": "CONTRIBUTOR", "body": "@dnfield I see your point: If repeatedly call this method, *and at the same time* the whole UI thread pipeline is much faster than 16ms, then we end up running multiple UI thread pipeline  inside one vsync interval. In other words, multi window.render per vsync interval. I admit is a waste - but it is the user who is doing the wrong thing ;) Just like, users can put a ton of Opacity and see rasterizer jank, or they can run sync operations on ui thread and observe ui jank, etc. Nobody can stop them from doing the wrong thing and observe bad outcome.", "createdAt": "2022-10-28T23:26:00Z", "includesCreatedEdit": false, "isMinimized": false, "minimizedReason": "", "reactionGroups": [{"content": "LAUGH", "users": {"totalCount": 1}}], "url": "https://github.com/flutter/engine/pull/36921#issuecomment-1295637070"}, {"id": "IC_kwDOAlZRSc5NwBli", "author": {"login": "fzyzcjy"}, "authorAssociation": "CONTRIBUTOR", "body": "https://github.com/flutter/engine/pull/36921#issuecomment-1294116970\r\n\r\n> Same comment as on the linked PR applies.\r\n\r\nI have made a v2 of that PR: https://github.com/flutter/engine/pull/37341\r\n\r\n> In particular, it's really hard to reason about how to use this parameter correctly. A lot of the work you're doing seems to be geared towards ignoring/overriding the vsync that the system gives us instead of cooperating with it more.\r\n\r\nI agree, it is overriding the system vsync. However, this is used for flutter_smooth, which *really* has to override some things in the engine...\r\n\r\nDoes it help if we mark it as `@experimental`? Then we can freely change it in the future without worrying potential users excluding flutter_smooth.\r\n\r\nP.S. Why this is needed: https://cjycode.com/flutter_smooth/design/infra/brake/\r\n\r\n> In particular, vsync is an important source of backpressure that we must respect. We cannot just keep shoving frames at the system compositor, we will overwhelm it and it will start dropping more frames than necessary/run into long GPU stalls. This will be really bad on older hardware, and still be bad on newer hardware.\r\n\r\nReplied above - IMHO seems not a problem?", "createdAt": "2022-11-05T07:52:10Z", "includesCreatedEdit": false, "isMinimized": false, "minimizedReason": "", "reactionGroups": [], "url": "https://github.com/flutter/engine/pull/36921#issuecomment-1304435042"}], "createdAt": "2022-10-21T12:48:32Z", "title": "Enable a frame to be scheduled immediately"}}