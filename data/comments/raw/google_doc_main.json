{"source": "google_doc_comments", "metadata": {}, "content": {"items": [{"deleted": false, "fileId": "sqJrz_YxIZFld_YCuSwsWcQ", "createdDate": "2022-09-28T23:27:19.384Z", "replies": [{"content": "1. Insert a maybePreemptRender to RenderObject.layout function seems enough, without breaking anything if I think correctly.\n2. I also think about another possibility, just do it the way now it is. In other words, let the user manually specify preempt points via SmoothPreemptPoint. Then one less PR to framework, and user has more flexibility.", "htmlContent": "1. Insert a maybePreemptRender to RenderObject.layout function seems enough, without breaking anything if I think correctly.<br>2. I also think about another possibility, just do it the way now it is. In other words, let the user manually specify preempt points via SmoothPreemptPoint. Then one less PR to framework, and user has more flexibility.", "deleted": false, "replyId": "AAAAhGPCXp4", "createdDate": "2022-09-28T23:34:25.287Z", "author": {"isAuthenticatedUser": true, "picture": {"url": "//lh3.googleusercontent.com/a/ALm5wu0cL7eQsTtaFybjJPIsXTlzlMMNQYM3jO2T_3lL=s50-c-k-no"}, "displayName": "Ch Tom", "kind": "drive#user"}, "kind": "drive#commentReply", "modifiedDate": "2022-09-28T23:34:46.529Z"}], "modifiedDate": "2022-09-28T23:34:46.529Z", "fileTitle": "Preemption for 60 FPS (PUBLICLY SHARED)", "anchor": "kix.2qze9ysz6nuc", "commentId": "AAAAhGPCXpg", "content": "https://github.com/fzyzcjy/flutter_smooth/blob/master/packages/smooth/example/lib/main.dart#L165 is a good chunk of the hard part. I'm not really clear from this document how that would automatically get inserted in meaningful places without breaking a lot of things.", "kind": "drive#comment", "author": {"isAuthenticatedUser": false, "picture": {"url": "//lh3.googleusercontent.com/a-/ACNPEu_TWOY1znasd7yvOYbKcBxplpbC4FTpueY9T0U-=s50-c-k-no"}, "displayName": "Dan Field", "kind": "drive#user"}, "htmlContent": "<a href=\"https://www.google.com/url?q=https://github.com/fzyzcjy/flutter_smooth/blob/master/packages/smooth/example/lib/main.dart%23L165&amp;sa=D&amp;source=docs&amp;ust=1665978869449161&amp;usg=AOvVaw2Erl5fy--DMNum7ACRvYwK\" data-rawHref=\"https://github.com/fzyzcjy/flutter_smooth/blob/master/packages/smooth/example/lib/main.dart#L165\" target=\"_blank\">https://github.com/fzyzcjy/flutter_smooth/blob/master/packages/smooth/example/lib/main.dart#L165</a> is a good chunk of the hard part. I&#39;m not really clear from this document how that would automatically get inserted in meaningful places without breaking a lot of things.", "status": "open", "context": {"type": "text/html", "value": "https://github.com/fzyzcjy/flutter_smooth package."}}, {"commentId": "AAAAhGPCXpU", "anchor": "kix.ml0i7hfbu57i", "fileTitle": "Preemption for 60 FPS (PUBLICLY SHARED)", "deleted": false, "kind": "drive#comment", "context": {"type": "text/html", "value": "6.67-12=4.67ms"}, "modifiedDate": "2022-09-29T00:09:30.460Z", "content": "Other things need time on this thread, for example GC.", "htmlContent": "Other things need time on this thread, for example GC.", "createdDate": "2022-09-28T23:21:09.174Z", "author": {"isAuthenticatedUser": false, "picture": {"url": "//lh3.googleusercontent.com/a-/ACNPEu_TWOY1znasd7yvOYbKcBxplpbC4FTpueY9T0U-=s50-c-k-no"}, "kind": "drive#user", "displayName": "Dan Field"}, "replies": [{"author": {"picture": {"url": "//lh3.googleusercontent.com/a/ALm5wu0cL7eQsTtaFybjJPIsXTlzlMMNQYM3jO2T_3lL=s50-c-k-no"}, "isAuthenticatedUser": true, "kind": "drive#user", "displayName": "Ch Tom"}, "htmlContent": "I agree theoretically. But during my experiments, I see about 39% of the UI thread time is idle, and I guess GC does not need that much time. This screenshot:\u00a0<a href=\"https://www.google.com/url?q=https://user-images.githubusercontent.com/5236035/190553863-5a373dcb-75ba-468d-8118-66e7a393070b.png&amp;sa=D&amp;source=docs&amp;ust=1665978869409277&amp;usg=AOvVaw3bHJeyjYw0PSGV5a780MZJ\" data-rawHref=\"https://user-images.githubusercontent.com/5236035/190553863-5a373dcb-75ba-468d-8118-66e7a393070b.png\" target=\"_blank\">https://user-images.githubusercontent.com/5236035/190553863-5a373dcb-75ba-468d-8118-66e7a393070b.png</a>", "deleted": false, "kind": "drive#commentReply", "replyId": "AAAAhGPCXpo", "modifiedDate": "2022-09-28T23:30:46.105Z", "content": "I agree theoretically. But during my experiments, I see about 39% of the UI thread time is idle, and I guess GC does not need that much time. This screenshot:\u00a0https://user-images.githubusercontent.com/5236035/190553863-5a373dcb-75ba-468d-8118-66e7a393070b.png", "createdDate": "2022-09-28T23:30:46.105Z"}, {"createdDate": "2022-09-28T23:45:08.783Z", "modifiedDate": "2022-09-28T23:45:08.783Z", "author": {"displayName": "Dan Field", "isAuthenticatedUser": false, "picture": {"url": "//lh3.googleusercontent.com/a-/ACNPEu_TWOY1znasd7yvOYbKcBxplpbC4FTpueY9T0U-=s50-c-k-no"}, "kind": "drive#user"}, "replyId": "AAAAhGPEyA8", "deleted": false, "kind": "drive#commentReply", "content": "In real applications under real workloads there is more need for GC time - for example, if your application is creating a lot of objects to understand data it fetched from the network or SQLite.", "htmlContent": "In real applications under real workloads there is more need for GC time - for example, if your application is creating a lot of objects to understand data it fetched from the network or SQLite."}, {"content": "I agree. But seems that we need to compare two cases:\n1. Without this new proposal: Suppose one frame is 100ms, then we have busy UI thread for 100ms without idle. And then frame ends so we have idle.\n2. With this proposal: We still be busy for 100ms (+3% overhead so indeed 103ms), and then get idle. In addition, we have 6 extra smooth frames which may generate some object.\n\nThus, the difference with this proposal is that, the objects we create inside extra smooth frame do give GC extra pressure. But I hope that is small - they are just animations.", "htmlContent": "I agree. But seems that we need to compare two cases:<br>1. Without this new proposal: Suppose one frame is 100ms, then we have busy UI thread for 100ms without idle. And then frame ends so we have idle.<br>2. With this proposal: We still be busy for 100ms (+3% overhead so indeed 103ms), and then get idle. In addition, we have 6 extra smooth frames which may generate some object.<br><br>Thus, the difference with this proposal is that, the objects we create inside extra smooth frame do give GC extra pressure. But I hope that is small - they are just animations.", "modifiedDate": "2022-09-29T00:06:53.439Z", "createdDate": "2022-09-29T00:06:53.439Z", "replyId": "AAAAhGPEyBY", "deleted": false, "author": {"kind": "drive#user", "displayName": "Ch Tom", "isAuthenticatedUser": true, "picture": {"url": "//lh3.googleusercontent.com/a/ALm5wu0cL7eQsTtaFybjJPIsXTlzlMMNQYM3jO2T_3lL=s50-c-k-no"}}, "kind": "drive#commentReply"}, {"deleted": false, "htmlContent": "Moreover, IMHO, my approach allows GC to happen, as long as it is less than 16ms stop-the-world and is not very unlucky.<br><br>For example, suppose GC happens during 17ms to 20ms. Then I can still build the layer tree and submit window.render at around 33.33ms. That stop-the-world GC does not cause any problem like visible jank. As long as we have about 0.5ms per 16.667ms, because 0.5ms is what we need (in experiments below) to produce an extra smooth frame.<br><br>On the contrary, existing methods may have jank in such cases. Because if GC runs for 3ms, they have 3ms less to compute the next scene.", "createdDate": "2022-09-29T00:09:30.460Z", "modifiedDate": "2022-09-29T00:09:30.460Z", "author": {"isAuthenticatedUser": true, "kind": "drive#user", "displayName": "Ch Tom", "picture": {"url": "//lh3.googleusercontent.com/a/ALm5wu0cL7eQsTtaFybjJPIsXTlzlMMNQYM3jO2T_3lL=s50-c-k-no"}}, "replyId": "AAAAhGPEyBc", "content": "Moreover, IMHO, my approach allows GC to happen, as long as it is less than 16ms stop-the-world and is not very unlucky.\n\nFor example, suppose GC happens during 17ms to 20ms. Then I can still build the layer tree and submit window.render at around 33.33ms. That stop-the-world GC does not cause any problem like visible jank. As long as we have about 0.5ms per 16.667ms, because 0.5ms is what we need (in experiments below) to produce an extra smooth frame.\n\nOn the contrary, existing methods may have jank in such cases. Because if GC runs for 3ms, they have 3ms less to compute the next scene.", "kind": "drive#commentReply"}], "status": "open", "fileId": "sqJrz_YxIZFld_YCuSwsWcQ"}, {"replies": [{"content": "My proposed method is not sensitive to the threshold indeed. In other words, suppose you happen to pause at 15ms, then you do not necessarily need to finish UI thread work and submit to raster thread in 16.67-15=1.67ms. On the contrary, you can, e.g. finish in 2ms or 3ms or 4ms or whatever, as long as raster thread have enough time to finish his hob.\n\nSome details can be found in the \"when to call preemptRender\" section", "deleted": false, "createdDate": "2022-09-26T22:51:53.514Z", "modifiedDate": "2022-09-26T22:51:53.514Z", "kind": "drive#commentReply", "author": {"isAuthenticatedUser": true, "displayName": "Ch Tom", "kind": "drive#user", "picture": {"url": "//lh3.googleusercontent.com/a/ALm5wu0cL7eQsTtaFybjJPIsXTlzlMMNQYM3jO2T_3lL=s50-c-k-no"}}, "replyId": "AAAAgw_vfXA", "htmlContent": "My proposed method is not sensitive to the threshold indeed. In other words, suppose you happen to pause at 15ms, then you do not necessarily need to finish UI thread work and submit to raster thread in 16.67-15=1.67ms. On the contrary, you can, e.g. finish in 2ms or 3ms or 4ms or whatever, as long as raster thread have enough time to finish his hob.<br><br>Some details can be found in the &quot;when to call preemptRender&quot; section"}], "context": {"value": "15fps", "type": "text/html"}, "htmlContent": "What happens if we can&#39;t update the existing tree in the 1.667ms we have then?\u00a0 How do we select this number 15ms?", "anchor": "kix.ruwpczl0u66p", "fileTitle": "Preemption for 60 FPS (PUBLICLY SHARED)", "author": {"kind": "drive#user", "isAuthenticatedUser": false, "displayName": "Aaron Clarke", "picture": {"url": "//lh3.googleusercontent.com/a-/ACNPEu8CmDmSFjwKOlhAge7mhUJMDfnDAln-lrJOFWr52A=s50-c-k-no"}}, "createdDate": "2022-09-26T21:21:30.304Z", "deleted": false, "commentId": "AAAAgw_vfUw", "fileId": "sqJrz_YxIZFld_YCuSwsWcQ", "status": "open", "content": "What happens if we can't update the existing tree in the 1.667ms we have then?\u00a0 How do we select this number 15ms?", "kind": "drive#comment", "modifiedDate": "2022-09-26T22:51:53.514Z"}, {"commentId": "AAAAgw_vfT8", "status": "open", "author": {"kind": "drive#user", "displayName": "Aaron Clarke", "isAuthenticatedUser": false, "picture": {"url": "//lh3.googleusercontent.com/a-/ACNPEu8CmDmSFjwKOlhAge7mhUJMDfnDAln-lrJOFWr52A=s50-c-k-no"}}, "kind": "drive#comment", "modifiedDate": "2022-09-27T13:42:13.940Z", "fileId": "sqJrz_YxIZFld_YCuSwsWcQ", "replies": [{"modifiedDate": "2022-09-27T13:42:13.940Z", "createdDate": "2022-09-27T13:41:58.686Z", "deleted": false, "author": {"picture": {"url": "//lh3.googleusercontent.com/a/ALm5wu0cL7eQsTtaFybjJPIsXTlzlMMNQYM3jO2T_3lL=s50-c-k-no"}, "isAuthenticatedUser": true, "displayName": "Ch Tom", "kind": "drive#user"}, "content": "I have not done thorough experiments (e.g. ListView scrolling) so cannot give a conclusion now. But it seems this package will cover all cases with less drawbacks and better performance, by solving the problem in a different approach.", "kind": "drive#commentReply", "replyId": "AAAAgkxeeus", "htmlContent": "I have not done thorough experiments (e.g. ListView scrolling) so cannot give a conclusion now. But it seems this package will cover all cases with less drawbacks and better performance, by solving the problem in a different approach."}], "htmlContent": "I&#39;m unfamiliar with how keframe works.\u00a0 Would this make that library obsolete?\u00a0 Does it handle all the cases it does?", "fileTitle": "Preemption for 60 FPS (PUBLICLY SHARED)", "content": "I'm unfamiliar with how keframe works.\u00a0 Would this make that library obsolete?\u00a0 Does it handle all the cases it does?", "deleted": false, "context": {"value": "Keframe", "type": "text/html"}, "createdDate": "2022-09-26T20:35:41.851Z", "anchor": "kix.jz351qv0hsey"}, {"anchor": "kix.yaqhwdxjzymt", "status": "open", "replies": [{"createdDate": "2022-09-27T13:38:33.735Z", "htmlContent": "Ah sorry I did not see all your questions! I only see the last, and when viewing the second-last I see my avatar so wrongly think all things below have been answered...", "kind": "drive#commentReply", "modifiedDate": "2022-09-27T13:38:33.735Z", "author": {"kind": "drive#user", "displayName": "Ch Tom", "isAuthenticatedUser": true, "picture": {"url": "//lh3.googleusercontent.com/a/ALm5wu0cL7eQsTtaFybjJPIsXTlzlMMNQYM3jO2T_3lL=s50-c-k-no"}}, "replyId": "AAAAgkxeeuk", "content": "Ah sorry I did not see all your questions! I only see the last, and when viewing the second-last I see my avatar so wrongly think all things below have been answered...", "deleted": false}, {"deleted": false, "htmlContent": "We do not resume or retry. We just <i>call</i> preemptRender function as any normal function call, and just <i>return</i> from it. So zero cost.", "author": {"picture": {"url": "//lh3.googleusercontent.com/a/ALm5wu0cL7eQsTtaFybjJPIsXTlzlMMNQYM3jO2T_3lL=s50-c-k-no"}, "isAuthenticatedUser": true, "displayName": "Ch Tom", "kind": "drive#user"}, "kind": "drive#commentReply", "modifiedDate": "2022-09-27T13:39:08.205Z", "replyId": "AAAAgkxeeuo", "createdDate": "2022-09-27T13:39:08.205Z", "content": "We do not resume or retry. We just _call_ preemptRender function as any normal function call, and just _return_ from it. So zero cost."}], "content": "It's unclear the mechanism that is used to resume layout.\u00a0 Are we really resuming or retrying?\u00a0 In order to resume the whole stack would have to be captured (ie a continuation).", "createdDate": "2022-09-26T20:17:01.105Z", "fileId": "sqJrz_YxIZFld_YCuSwsWcQ", "deleted": false, "modifiedDate": "2022-09-27T13:39:08.205Z", "commentId": "AAAAgw_vfTs", "fileTitle": "Preemption for 60 FPS (PUBLICLY SHARED)", "author": {"picture": {"url": "//lh3.googleusercontent.com/a-/ACNPEu8CmDmSFjwKOlhAge7mhUJMDfnDAln-lrJOFWr52A=s50-c-k-no"}, "displayName": "Aaron Clarke", "isAuthenticatedUser": false, "kind": "drive#user"}, "kind": "drive#comment", "htmlContent": "It&#39;s unclear the mechanism that is used to resume layout.\u00a0 Are we really resuming or retrying?\u00a0 In order to resume the whole stack would have to be captured (ie a continuation).", "context": {"type": "text/html", "value": "because preemptRaster function returns. The Dart code will continue from where preemptRaster is called"}}, {"htmlContent": "I would like to add:\u00a0 this solution has less overhead than keframe. When Keframe replaces placeholder with real widget, it is driven by vsync signal to execute drawFrame process and submit to engine, so it will execute the complete build/layout/paint etc process. But build/layout/paint other than the actual widget is not necessary. In the Preempt Layout scheme, the UI thread just voluntarily submits a frame to the Engine after 16ms of detection, and then returns to the normal rendering flow without much additional overhead.", "fileId": "sqJrz_YxIZFld_YCuSwsWcQ", "replies": [{"modifiedDate": "2022-09-22T13:18:08.710Z", "htmlContent": "Thanks, I added it", "createdDate": "2022-09-22T13:18:08.710Z", "author": {"kind": "drive#user", "picture": {"url": "//lh3.googleusercontent.com/a/ALm5wu0cL7eQsTtaFybjJPIsXTlzlMMNQYM3jO2T_3lL=s50-c-k-no"}, "displayName": "Ch Tom", "isAuthenticatedUser": true}, "replyId": "AAAAghP1jEQ", "content": "Thanks, I added it", "kind": "drive#commentReply", "deleted": false}], "createdDate": "2022-09-22T13:01:35.648Z", "context": {"value": "but only do a little job (send existing layer tree to raster thread), which is much more predictable in terms of time, so we have less risk of missing 16.6ms.", "type": "text/html"}, "modifiedDate": "2022-09-22T13:18:08.710Z", "anchor": "kix.19zral1rmfdr", "deleted": false, "commentId": "AAAAghP1jDo", "fileTitle": "Preemption for 60 FPS (PUBLICLY SHARED)", "author": {"isAuthenticatedUser": false, "picture": {"url": "//lh3.googleusercontent.com/a-/ACNPEu_evxzTPBILPDiJG-32oOVsdQGVR-GTJ_12emWX=s50-c-k-no"}, "displayName": "Nayuta", "kind": "drive#user"}, "content": "I would like to add:\u00a0 this solution has less overhead than keframe. When Keframe replaces placeholder with real widget, it is driven by vsync signal to execute drawFrame process and submit to engine, so it will execute the complete build/layout/paint etc process. But build/layout/paint other than the actual widget is not necessary. In the Preempt Layout scheme, the UI thread just voluntarily submits a frame to the Engine after 16ms of detection, and then returns to the normal rendering flow without much additional overhead.", "kind": "drive#comment", "status": "open"}, {"context": {"value": "see the CircularProgressIndicator is having 60fps", "type": "text/html"}, "replies": [{"replyId": "AAAAgghZK9M", "deleted": false, "kind": "drive#commentReply", "modifiedDate": "2022-09-22T00:11:20.716Z", "createdDate": "2022-09-22T00:11:20.716Z", "htmlContent": "No problem :) Progress indicator updates the UI also inside preemptModifyLayerTree, and that is why it is smooth 60fps.", "content": "No problem :) Progress indicator updates the UI also inside preemptModifyLayerTree, and that is why it is smooth 60fps.", "author": {"displayName": "Ch Tom", "isAuthenticatedUser": true, "picture": {"url": "//lh3.googleusercontent.com/a/ALm5wu0cL7eQsTtaFybjJPIsXTlzlMMNQYM3jO2T_3lL=s50-c-k-no"}, "kind": "drive#user"}}, {"kind": "drive#commentReply", "htmlContent": "How does the framework know this is the one that needs painting?<br><br>What if it this is the slow part?", "replyId": "AAAAgghZK94", "deleted": false, "author": {"picture": {"url": "//lh3.googleusercontent.com/a-/ACNPEu8ltWGjT63xAXFQeh_WZf-FUDmfm18lcjZF7NAyetE=s50-c-k-no"}, "kind": "drive#user", "isAuthenticatedUser": false, "displayName": "Ian Hickson"}, "modifiedDate": "2022-09-22T00:47:48.550Z", "content": "How does the framework know this is the one that needs painting?\n\nWhat if it this is the slow part?", "createdDate": "2022-09-22T00:47:48.550Z"}, {"replyId": "AAAAgghZK98", "kind": "drive#commentReply", "content": "Users manually write down \"PreemptDisplayList(child:CircularProgressIndicator(preempt: false, \u2026 other argos \u2026),)\"\n\nThen, when framework wants to preempt render an extra frame, it calls\u00a0PreemptDisplayList.preemptModifyLayerTree.\n\n>\u00a0What if it this is the slow part?\n\nThen it jank. But IMHO this happens rarely, at least should be ok for progress indicator\u00a0and scrolling list view - could you please provide some real world case where it will be slow?", "htmlContent": "Users manually write down &quot;PreemptDisplayList(child:CircularProgressIndicator(preempt: false, \u2026 other argos \u2026),)&quot;<br><br>Then, when framework wants to preempt render an extra frame, it calls\u00a0PreemptDisplayList.preemptModifyLayerTree.<br><br>&gt;\u00a0What if it this is the slow part?<br><br>Then it jank. But IMHO this happens rarely, at least should be ok for progress indicator\u00a0and scrolling list view - could you please provide some real world case where it will be slow?", "deleted": false, "modifiedDate": "2022-09-22T00:49:30.019Z", "author": {"picture": {"url": "//lh3.googleusercontent.com/a/ALm5wu0cL7eQsTtaFybjJPIsXTlzlMMNQYM3jO2T_3lL=s50-c-k-no"}, "isAuthenticatedUser": true, "displayName": "Ch Tom", "kind": "drive#user"}, "createdDate": "2022-09-22T00:49:30.019Z"}, {"replyId": "AAAAgghZK-E", "kind": "drive#commentReply", "deleted": false, "content": "If the animation is really the slow part under that special case, then any single-threaded solution will not work IMHO. (Seems flutter does not want multithread and I agree with that, so we only consider single thread solutions)", "htmlContent": "If the animation is really the slow part under that special case, then any single-threaded solution will not work IMHO. (Seems flutter does not want multithread and I agree with that, so we only consider single thread solutions)", "createdDate": "2022-09-22T00:50:59.190Z", "modifiedDate": "2022-09-22T00:50:59.190Z", "author": {"kind": "drive#user", "isAuthenticatedUser": true, "displayName": "Ch Tom", "picture": {"url": "//lh3.googleusercontent.com/a/ALm5wu0cL7eQsTtaFybjJPIsXTlzlMMNQYM3jO2T_3lL=s50-c-k-no"}}}, {"modifiedDate": "2022-09-22T18:10:23.481Z", "replyId": "AAAAgAJWz4g", "createdDate": "2022-09-22T18:10:23.481Z", "content": "I think if we can find a way to do multithreading nobody is against it a priori.\n\nIf I may, it sounds like your proposal boils down to \"provide developers with a way to mark areas of the tree that should be updated first (doing build, layout, paint, and semantics), then, if the time runs out during a frame, send the updated layer tree that only contains those parts and not the others, then continue doing the frame\". Is that right?\n\nIf so, I think the main problem with this approach is that we'd have to rerun the rarely-mentioned (because it's so cheap) \"animation\" step that happens before build, so that the parts of the tree that need animating early can be updated with the new time stamp, but in the current model, that requires winding down the stack frame because between the \"animation\" and \"build\" phases we run microtasks.\n\nI also worry that it would lead to some strange effects like how to determine which parts of the tree to update and which to not. For example, suppose you have three parts to your page. Part A is marked as needing fast updates, and parts B and C other two are expensive animations.\n\nWe start frame 1, we update all the AnimationControllers, we build/layout/paint/layer/semantics the first (A), then we start on B, and we do no build and layout of B. Then we interrupt the work to send the tree to the engine with A's update. We do a new animation phase to update all the AnimationControllers again, we build/layout/paint/layer/semantics the first (A), then we resume the work on the original frame. Now we build/layout C. Finally build and layout are done so we paint B and C and do the layer tree and render it. Unfortunately, because B and C were painted after different animation phases, they'll be out of sync. It'll look like the two animations are running at a low frame rate _and out of sync with each other_, which IMHO is worse than today (where they're just at a low frame rate).\n\nThat's assuming we can figure out how to do the animation phase at all.", "htmlContent": "I think if we can find a way to do multithreading nobody is against it a priori.<br><br>If I may, it sounds like your proposal boils down to &quot;provide developers with a way to mark areas of the tree that should be updated first (doing build, layout, paint, and semantics), then, if the time runs out during a frame, send the updated layer tree that only contains those parts and not the others, then continue doing the frame&quot;. Is that right?<br><br>If so, I think the main problem with this approach is that we&#39;d have to rerun the rarely-mentioned (because it&#39;s so cheap) &quot;animation&quot; step that happens before build, so that the parts of the tree that need animating early can be updated with the new time stamp, but in the current model, that requires winding down the stack frame because between the &quot;animation&quot; and &quot;build&quot; phases we run microtasks.<br><br>I also worry that it would lead to some strange effects like how to determine which parts of the tree to update and which to not. For example, suppose you have three parts to your page. Part A is marked as needing fast updates, and parts B and C other two are expensive animations.<br><br>We start frame 1, we update all the AnimationControllers, we build/layout/paint/layer/semantics the first (A), then we start on B, and we do no build and layout of B. Then we interrupt the work to send the tree to the engine with A&#39;s update. We do a new animation phase to update all the AnimationControllers again, we build/layout/paint/layer/semantics the first (A), then we resume the work on the original frame. Now we build/layout C. Finally build and layout are done so we paint B and C and do the layer tree and render it. Unfortunately, because B and C were painted after different animation phases, they&#39;ll be out of sync. It&#39;ll look like the two animations are running at a low frame rate <i>and out of sync with each other</i>, which IMHO is worse than today (where they&#39;re just at a low frame rate).<br><br>That&#39;s assuming we can figure out how to do the animation phase at all.", "author": {"kind": "drive#user", "isAuthenticatedUser": false, "displayName": "Ian Hickson", "picture": {"url": "//lh3.googleusercontent.com/a-/ACNPEu8ltWGjT63xAXFQeh_WZf-FUDmfm18lcjZF7NAyetE=s50-c-k-no"}}, "kind": "drive#commentReply", "deleted": false}, {"createdDate": "2022-09-22T23:07:21.894Z", "deleted": false, "author": {"displayName": "Ch Tom", "kind": "drive#user", "isAuthenticatedUser": true, "picture": {"url": "//lh3.googleusercontent.com/a/ALm5wu0cL7eQsTtaFybjJPIsXTlzlMMNQYM3jO2T_3lL=s50-c-k-no"}}, "modifiedDate": "2022-09-22T23:07:21.894Z", "htmlContent": "&gt; boils down to ... Is that right?<br><br>Quite similar to my existing proposal, if it is implementable, sure.<br><br>&gt; we&#39;d have to rerun the rarely-mentioned (because it&#39;s so cheap) &quot;animation&quot; step ... because between the &quot;animation&quot; and &quot;build&quot; phases we run microtasks.<br><br>Indeed I am also quite curious why it was design like that, instead of putting animation into build/layout phase.<br>Anyway, if using the PreemptBuilder dev-facing API, dev just use a builder callback (like what we have done a million times) to drive animation, which is flexible.<br><br>&gt; Unfortunately, because B and C were painted after different animation phases, they&#39;ll be out of sync.<br><br>Sorry I cannot get it. In my proposal, they always see the same vsync signal. Indeed, using the mental model (a section in this design doc), every code should just see the plain old janky environment, except for a small portion of the code (the one inside PreemptBuilder) which knows extra info.<br><br>&gt; That&#39;s assuming we can figure out how to do the animation phase at all.<br><br>Currently I plan <b>not</b> to do the animation phase indeed, and just use the builder callback.", "kind": "drive#commentReply", "content": "> boils down to ... Is that right?\n\nQuite similar to my existing proposal, if it is implementable, sure.\n\n> we'd have to rerun the rarely-mentioned (because it's so cheap) \"animation\" step ... because between the \"animation\" and \"build\" phases we run microtasks.\n\nIndeed I am also quite curious why it was design like that, instead of putting animation into build/layout phase.\nAnyway, if using the PreemptBuilder dev-facing API, dev just use a builder callback (like what we have done a million times) to drive animation, which is flexible.\n\n> Unfortunately, because B and C were painted after different animation phases, they'll be out of sync.\n\nSorry I cannot get it. In my proposal, they always see the same vsync signal. Indeed, using the mental model (a section in this design doc), every code should just see the plain old janky environment, except for a small portion of the code (the one inside PreemptBuilder) which knows extra info.\n\n> That's assuming we can figure out how to do the animation phase at all.\n\nCurrently I plan *not* to do the animation phase indeed, and just use the builder callback.", "replyId": "AAAAgi3nytg"}, {"author": {"displayName": "Ch Tom", "kind": "drive#user", "picture": {"url": "//lh3.googleusercontent.com/a/ALm5wu0cL7eQsTtaFybjJPIsXTlzlMMNQYM3jO2T_3lL=s50-c-k-no"}, "isAuthenticatedUser": true}, "replyId": "AAAAgi3nytk", "modifiedDate": "2022-09-22T23:26:20.434Z", "htmlContent": "IIRC, Flutter officially supports us to using builder pattern for animations. For example, AnimatedBuilder is indeed implemented as `setState` per Listenable update, very similar to how we treat PreemptBuilder - build (setState?) per 60fps frame.", "kind": "drive#commentReply", "content": "IIRC, Flutter officially supports us to using builder pattern for animations. For example, AnimatedBuilder is indeed implemented as `setState` per Listenable update, very similar to how we treat PreemptBuilder - build (setState?) per 60fps frame.", "deleted": false, "createdDate": "2022-09-22T23:26:20.434Z"}], "anchor": "kix.9ohsv369hzqj", "commentId": "AAAAgghZK8U", "createdDate": "2022-09-21T23:52:01.162Z", "htmlContent": "what if the preempt happened before the progress indicator got to rebuild?", "fileId": "sqJrz_YxIZFld_YCuSwsWcQ", "content": "what if the preempt happened before the progress indicator got to rebuild?", "deleted": false, "modifiedDate": "2022-09-22T23:26:20.434Z", "fileTitle": "Preemption for 60 FPS (PUBLICLY SHARED)", "kind": "drive#comment", "author": {"kind": "drive#user", "isAuthenticatedUser": false, "displayName": "Ian Hickson", "picture": {"url": "//lh3.googleusercontent.com/a-/ACNPEu8ltWGjT63xAXFQeh_WZf-FUDmfm18lcjZF7NAyetE=s50-c-k-no"}}, "status": "open"}, {"deleted": false, "fileId": "sqJrz_YxIZFld_YCuSwsWcQ", "author": {"displayName": "Ian Hickson", "picture": {"url": "//lh3.googleusercontent.com/a-/ACNPEu8ltWGjT63xAXFQeh_WZf-FUDmfm18lcjZF7NAyetE=s50-c-k-no"}, "isAuthenticatedUser": false, "kind": "drive#user"}, "replies": [{"htmlContent": "See examples below, flutter framework dev (e.g. me) write down some code to cover a range of cases. Users can also write some if want very special behavior", "deleted": false, "modifiedDate": "2022-09-22T00:10:42.809Z", "content": "See examples below, flutter framework dev (e.g. me) write down some code to cover a range of cases. Users can also write some if want very special behavior", "replyId": "AAAAgghZK9I", "kind": "drive#commentReply", "author": {"displayName": "Ch Tom", "picture": {"url": "//lh3.googleusercontent.com/a/ALm5wu0cL7eQsTtaFybjJPIsXTlzlMMNQYM3jO2T_3lL=s50-c-k-no"}, "kind": "drive#user", "isAuthenticatedUser": true}, "createdDate": "2022-09-22T00:10:42.809Z"}, {"createdDate": "2022-09-22T00:47:21.780Z", "deleted": false, "htmlContent": "This is the part I don&#39;t really understand.", "author": {"kind": "drive#user", "isAuthenticatedUser": false, "picture": {"url": "//lh3.googleusercontent.com/a-/ACNPEu8ltWGjT63xAXFQeh_WZf-FUDmfm18lcjZF7NAyetE=s50-c-k-no"}, "displayName": "Ian Hickson"}, "replyId": "AAAAgghZK90", "modifiedDate": "2022-09-22T00:47:21.780Z", "content": "This is the part I don't really understand.", "kind": "drive#commentReply"}, {"replyId": "AAAAgghZK-A", "deleted": false, "htmlContent": "I have replied to another comment in google doc. Does that help? If not I can elaborate", "content": "I have replied to another comment in google doc. Does that help? If not I can elaborate", "author": {"kind": "drive#user", "picture": {"url": "//lh3.googleusercontent.com/a/ALm5wu0cL7eQsTtaFybjJPIsXTlzlMMNQYM3jO2T_3lL=s50-c-k-no"}, "isAuthenticatedUser": true, "displayName": "Ch Tom"}, "createdDate": "2022-09-22T00:50:08.815Z", "kind": "drive#commentReply", "modifiedDate": "2022-09-22T00:50:08.815Z"}], "createdDate": "2022-09-21T23:51:38.614Z", "fileTitle": "Preemption for 60 FPS (PUBLICLY SHARED)", "context": {"value": "preemptModifyLayerTree will modify the layer tree a bit", "type": "text/html"}, "anchor": "kix.ud4pg0p8yrzi", "htmlContent": "how does it know what to do?", "commentId": "AAAAgghZK8Q", "content": "how does it know what to do?", "kind": "drive#comment", "modifiedDate": "2022-09-22T00:50:08.815Z", "status": "open"}, {"commentId": "AAAAgghZK8M", "content": "since we haven't done paint yet, what we're painting here is just the last frame. there's no need to send it to the engine, it's already got it.", "modifiedDate": "2022-09-22T00:10:03.149Z", "deleted": false, "fileId": "sqJrz_YxIZFld_YCuSwsWcQ", "kind": "drive#comment", "fileTitle": "Preemption for 60 FPS (PUBLICLY SHARED)", "createdDate": "2022-09-21T23:48:55.117Z", "replies": [{"author": {"displayName": "Ch Tom", "kind": "drive#user", "picture": {"url": "//lh3.googleusercontent.com/a/ALm5wu0cL7eQsTtaFybjJPIsXTlzlMMNQYM3jO2T_3lL=s50-c-k-no"}, "isAuthenticatedUser": true}, "createdDate": "2022-09-22T00:10:03.149Z", "replyId": "AAAAgghZK9E", "htmlContent": "Last frame,\u00a0 but plus &quot;preemptModifyLayerTree&quot;. For the scrolling listview example, we will modify the OffsetLayer.offset a bit (the amount by inertia). Then, users will see the list content shifted a little bit. So users will see list scrolling smoothly at 60fps, even if one build/layout/paint/... cycle takes, say, 10fps.", "kind": "drive#commentReply", "content": "Last frame,\u00a0 but plus \"preemptModifyLayerTree\". For the scrolling listview example, we will modify the OffsetLayer.offset a bit (the amount by inertia). Then, users will see the list content shifted a little bit. So users will see list scrolling smoothly at 60fps, even if one build/layout/paint/... cycle takes, say, 10fps.", "deleted": false, "modifiedDate": "2022-09-22T00:10:03.149Z"}], "context": {"type": "text/html", "value": "We will send this to raster"}, "anchor": "kix.gdgy17122vn6", "status": "open", "author": {"kind": "drive#user", "isAuthenticatedUser": false, "picture": {"url": "//lh3.googleusercontent.com/a-/ACNPEu8ltWGjT63xAXFQeh_WZf-FUDmfm18lcjZF7NAyetE=s50-c-k-no"}, "displayName": "Ian Hickson"}, "htmlContent": "since we haven&#39;t done paint yet, what we&#39;re painting here is just the last frame. there&#39;s no need to send it to the engine, it&#39;s already got it."}, {"deleted": false, "fileTitle": "Preemption for 60 FPS (PUBLICLY SHARED)", "htmlContent": "the way flutter does build and layout is interleaved, but not fine-grained. lots of building happens, then lots of layout, then lots of building, etc. You can run out of time at any time in this process, with a hundred widgets built but not laid out, for example. now the system is in a very inconsistent state.", "createdDate": "2022-09-21T23:47:38.511Z", "fileId": "sqJrz_YxIZFld_YCuSwsWcQ", "kind": "drive#comment", "anchor": "kix.dz9dj9jwitvw", "author": {"kind": "drive#user", "displayName": "Ian Hickson", "isAuthenticatedUser": false, "picture": {"url": "//lh3.googleusercontent.com/a-/ACNPEu8ltWGjT63xAXFQeh_WZf-FUDmfm18lcjZF7NAyetE=s50-c-k-no"}}, "replies": [{"content": "Sure. Then I should insert `if timeout then preemptRender` into the `build()` as well, and seems we have no problem.\n\nBtw, no inconsistent state :) I am sending the _layer tree_ in preemptRender, so I just accept the dart state to be completely in middle", "replyId": "AAAAgghZK9A", "deleted": false, "modifiedDate": "2022-09-22T00:09:05.191Z", "htmlContent": "Sure. Then I should insert `if timeout then preemptRender` into the `build()` as well, and seems we have no problem.<br><br>Btw, no inconsistent state :) I am sending the <i>layer tree</i> in preemptRender, so I just accept the dart state to be completely in middle", "createdDate": "2022-09-22T00:09:05.191Z", "author": {"displayName": "Ch Tom", "picture": {"url": "//lh3.googleusercontent.com/a/ALm5wu0cL7eQsTtaFybjJPIsXTlzlMMNQYM3jO2T_3lL=s50-c-k-no"}, "isAuthenticatedUser": true, "kind": "drive#user"}, "kind": "drive#commentReply"}], "content": "the way flutter does build and layout is interleaved, but not fine-grained. lots of building happens, then lots of layout, then lots of building, etc. You can run out of time at any time in this process, with a hundred widgets built but not laid out, for example. now the system is in a very inconsistent state.", "status": "open", "context": {"type": "text/html", "value": "It build/layout the 1st"}, "commentId": "AAAAgghZK8I", "modifiedDate": "2022-09-22T00:09:05.191Z"}, {"htmlContent": "I don&#39;t see a clear description of what your proposal is.\u00a0 The first information under &quot;detailed design&quot; are questions.", "context": {"value": "DETAILED DESIGN/DISCUSSION", "type": "text/html"}, "kind": "drive#comment", "fileId": "sqJrz_YxIZFld_YCuSwsWcQ", "deleted": false, "fileTitle": "Preemption for 60 FPS (PUBLICLY SHARED)", "status": "open", "modifiedDate": "2022-09-21T23:44:41.631Z", "createdDate": "2022-09-21T23:28:16.183Z", "replies": [{"kind": "drive#commentReply", "replyId": "AAAAgghZK7E", "createdDate": "2022-09-21T23:29:52.258Z", "htmlContent": "I should move it, wait a minute", "modifiedDate": "2022-09-21T23:29:52.258Z", "deleted": false, "content": "I should move it, wait a minute", "author": {"displayName": "Ch Tom", "isAuthenticatedUser": true, "kind": "drive#user", "picture": {"url": "//lh3.googleusercontent.com/a/ALm5wu0cL7eQsTtaFybjJPIsXTlzlMMNQYM3jO2T_3lL=s50-c-k-no"}}}, {"htmlContent": "I think that stuff we just said on the discord would be a good description: preempt build/layout, update the last layer, render the last frame, resume build/layout", "author": {"kind": "drive#user", "isAuthenticatedUser": false, "displayName": "Aaron Clarke", "picture": {"url": "//lh3.googleusercontent.com/a-/ACNPEu8CmDmSFjwKOlhAge7mhUJMDfnDAln-lrJOFWr52A=s50-c-k-no"}}, "createdDate": "2022-09-21T23:41:52.568Z", "deleted": false, "modifiedDate": "2022-09-21T23:41:52.568Z", "content": "I think that stuff we just said on the discord would be a good description: preempt build/layout, update the last layer, render the last frame, resume build/layout", "replyId": "AAAAgghZK7c", "kind": "drive#commentReply"}, {"author": {"displayName": "Ch Tom", "isAuthenticatedUser": true, "kind": "drive#user", "picture": {"url": "//lh3.googleusercontent.com/a/ALm5wu0cL7eQsTtaFybjJPIsXTlzlMMNQYM3jO2T_3lL=s50-c-k-no"}}, "createdDate": "2022-09-21T23:44:41.631Z", "replyId": "AAAAgghZK7o", "kind": "drive#commentReply", "htmlContent": "Thanks! I will add that", "content": "Thanks! I will add that", "modifiedDate": "2022-09-21T23:44:41.631Z", "deleted": false}], "commentId": "AAAAgghZK6o", "content": "I don't see a clear description of what your proposal is.\u00a0 The first information under \"detailed design\" are questions.", "anchor": "kix.ia56567ne35w", "author": {"kind": "drive#user", "displayName": "Aaron Clarke", "picture": {"url": "//lh3.googleusercontent.com/a-/ACNPEu8CmDmSFjwKOlhAge7mhUJMDfnDAln-lrJOFWr52A=s50-c-k-no"}, "isAuthenticatedUser": false}}, {"status": "resolved", "htmlContent": "If I understand correctly, you want to use the full LayerTree result from the last time. Like this object in the Raster thread?<br><br><a href=\"https://www.google.com/url?q=https://github.com/flutter/engine/blob/4839a3b5d225f7d522bf9edf5cfe395c187b0e93/shell/common/rasterizer.cc%23L381&amp;sa=D&amp;source=docs&amp;ust=1665978869437402&amp;usg=AOvVaw0BQPNYA0ZGxJ35Ljtqc6pB\" data-rawHref=\"https://github.com/flutter/engine/blob/4839a3b5d225f7d522bf9edf5cfe395c187b0e93/shell/common/rasterizer.cc#L381\" target=\"_blank\">https://github.com/flutter/engine/blob/4839a3b5d225f7d522bf9edf5cfe395c187b0e93/shell/common/rasterizer.cc#L381</a>", "content": "If I understand correctly, you want to use the full LayerTree result from the last time. Like this object in the Raster thread?\n\nhttps://github.com/flutter/engine/blob/4839a3b5d225f7d522bf9edf5cfe395c187b0e93/shell/common/rasterizer.cc#L381", "fileTitle": "Preemption for 60 FPS (PUBLICLY SHARED)", "replies": [{"kind": "drive#commentReply", "deleted": false, "htmlContent": "Almost the same full layer tree, except for preemptModifylayerTree", "author": {"picture": {"url": "//lh3.googleusercontent.com/a/ALm5wu0cL7eQsTtaFybjJPIsXTlzlMMNQYM3jO2T_3lL=s50-c-k-no"}, "isAuthenticatedUser": true, "kind": "drive#user", "displayName": "Ch Tom"}, "modifiedDate": "2022-09-21T13:06:28.964Z", "createdDate": "2022-09-21T13:06:28.964Z", "replyId": "AAAAgfusIVQ", "content": "Almost the same full layer tree, except for preemptModifylayerTree"}, {"replyId": "AAAAggxsF2g", "modifiedDate": "2022-09-22T02:50:13.980Z", "deleted": false, "createdDate": "2022-09-22T02:50:13.980Z", "author": {"kind": "drive#user", "displayName": "Nayuta", "picture": {"url": "//lh3.googleusercontent.com/a-/ACNPEu_evxzTPBILPDiJG-32oOVsdQGVR-GTJ_12emWX=s50-c-k-no"}, "isAuthenticatedUser": false}, "kind": "drive#commentReply", "htmlContent": "", "content": "", "verb": "resolve"}], "context": {"value": "so the layer tree is completely old (instead of mixed).", "type": "text/html"}, "anchor": "kix.pxl6gzkxs922", "deleted": false, "author": {"isAuthenticatedUser": false, "picture": {"url": "//lh3.googleusercontent.com/a-/ACNPEu_evxzTPBILPDiJG-32oOVsdQGVR-GTJ_12emWX=s50-c-k-no"}, "displayName": "Nayuta", "kind": "drive#user"}, "modifiedDate": "2022-09-22T02:50:13.980Z", "fileId": "sqJrz_YxIZFld_YCuSwsWcQ", "kind": "drive#comment", "createdDate": "2022-09-21T12:20:48.095Z", "commentId": "AAAAgfacSXI"}, {"context": {"value": "In other words, we provide layer tree to C++ code", "type": "text/html"}, "commentId": "AAAAgfacSXE", "deleted": false, "content": "How is this Layertree generated (since the current RO is not painted), it still looks like the LayerTree from the previous frame?", "kind": "drive#comment", "anchor": "kix.r2pvua7ik06o", "replies": [{"content": "Yes, from previous frame, but modified a bit from preemptModifyLayerTree.", "replyId": "AAAAgfusIVM", "author": {"displayName": "Ch Tom", "isAuthenticatedUser": true, "kind": "drive#user", "picture": {"url": "//lh3.googleusercontent.com/a/ALm5wu0cL7eQsTtaFybjJPIsXTlzlMMNQYM3jO2T_3lL=s50-c-k-no"}}, "kind": "drive#commentReply", "modifiedDate": "2022-09-21T13:06:00.227Z", "deleted": false, "htmlContent": "Yes, from previous frame, but modified a bit from preemptModifyLayerTree.", "createdDate": "2022-09-21T13:06:00.227Z"}, {"deleted": false, "content": "", "createdDate": "2022-09-22T02:50:15.062Z", "modifiedDate": "2022-09-22T02:50:15.062Z", "replyId": "AAAAggxsF2k", "author": {"isAuthenticatedUser": false, "picture": {"url": "//lh3.googleusercontent.com/a-/ACNPEu_evxzTPBILPDiJG-32oOVsdQGVR-GTJ_12emWX=s50-c-k-no"}, "displayName": "Nayuta", "kind": "drive#user"}, "verb": "resolve", "htmlContent": "", "kind": "drive#commentReply"}], "modifiedDate": "2022-09-22T02:50:15.062Z", "status": "resolved", "htmlContent": "How is this Layertree generated (since the current RO is not painted), it still looks like the LayerTree from the previous frame?", "author": {"isAuthenticatedUser": false, "displayName": "Nayuta", "picture": {"url": "//lh3.googleusercontent.com/a-/ACNPEu_evxzTPBILPDiJG-32oOVsdQGVR-GTJ_12emWX=s50-c-k-no"}, "kind": "drive#user"}, "fileTitle": "Preemption for 60 FPS (PUBLICLY SHARED)", "createdDate": "2022-09-21T12:15:28.332Z", "fileId": "sqJrz_YxIZFld_YCuSwsWcQ"}, {"modifiedDate": "2022-09-21T04:16:35.058Z", "createdDate": "2022-09-21T04:05:06.582Z", "status": "open", "fileId": "sqJrz_YxIZFld_YCuSwsWcQ", "replies": [{"author": {"displayName": "Ch Tom", "isAuthenticatedUser": true, "kind": "drive#user", "picture": {"url": "//lh3.googleusercontent.com/a/ALm5wu0cL7eQsTtaFybjJPIsXTlzlMMNQYM3jO2T_3lL=s50-c-k-no"}}, "replyId": "AAAAgdW1Sw4", "createdDate": "2022-09-21T04:16:01.715Z", "deleted": false, "content": ">\u00a0showing a single progress indicator or simple animation tends not to be the issue\n\nWell the example is indeed, \"have progress indicator 60fps, *while* we are doing something really heavy\". i.e. just the interesting case you said :)\n\nContent edited", "htmlContent": "&gt;\u00a0showing a single progress indicator or simple animation tends not to be the issue<br><br>Well the example is indeed, &quot;have progress indicator 60fps, <b>while</b> we are doing something really heavy&quot;. i.e. just the interesting case you said :)<br><br>Content edited", "modifiedDate": "2022-09-21T04:16:35.058Z", "kind": "drive#commentReply"}], "author": {"displayName": "Dan Field", "isAuthenticatedUser": false, "kind": "drive#user", "picture": {"url": "//lh3.googleusercontent.com/a-/ACNPEu_TWOY1znasd7yvOYbKcBxplpbC4FTpueY9T0U-=s50-c-k-no"}}, "kind": "drive#comment", "commentId": "AAAAgdW1Swk", "anchor": "kix.vt9ucwzdbg03", "htmlContent": "These are not particularly pressing examples right now - showing a single progress indicator or simple animation tends not to be the issue, it&#39;s more like doing a full screen route transition where you&#39;re building a a large new tree or subtree with a few hundred widgets to inflate and layout.", "context": {"type": "text/html", "value": "CircularProgressIndicator"}, "deleted": false, "content": "These are not particularly pressing examples right now - showing a single progress indicator or simple animation tends not to be the issue, it's more like doing a full screen route transition where you're building a a large new tree or subtree with a few hundred widgets to inflate and layout.", "fileTitle": "Preemption for 60 FPS (PUBLICLY SHARED)"}, {"htmlContent": "This will cause problems with scrolling/touch events.", "context": {"type": "text/html", "value": "one frame lag"}, "anchor": "kix.4sj5x870vmah", "status": "open", "createdDate": "2022-09-21T04:04:10.196Z", "fileId": "sqJrz_YxIZFld_YCuSwsWcQ", "author": {"isAuthenticatedUser": false, "displayName": "Dan Field", "kind": "drive#user", "picture": {"url": "//lh3.googleusercontent.com/a-/ACNPEu_TWOY1znasd7yvOYbKcBxplpbC4FTpueY9T0U-=s50-c-k-no"}}, "kind": "drive#comment", "fileTitle": "Preemption for 60 FPS (PUBLICLY SHARED)", "modifiedDate": "2022-09-21T04:14:24.576Z", "content": "This will cause problems with scrolling/touch events.", "deleted": false, "commentId": "AAAAgdW1Swg", "replies": [{"replyId": "AAAAgdW1Sw0", "htmlContent": "That&#39;s &quot;that&quot; approach which I am comparing\u00a0to. My proposal does not have this :)", "content": "That's \"that\" approach which I am comparing\u00a0to. My proposal does not have this :)", "kind": "drive#commentReply", "modifiedDate": "2022-09-21T04:14:24.576Z", "author": {"displayName": "Ch Tom", "kind": "drive#user", "isAuthenticatedUser": true, "picture": {"url": "//lh3.googleusercontent.com/a/ALm5wu0cL7eQsTtaFybjJPIsXTlzlMMNQYM3jO2T_3lL=s50-c-k-no"}}, "createdDate": "2022-09-21T04:14:24.576Z", "deleted": false}]}, {"kind": "drive#comment", "content": "Layout for a single widget can easily blow through frame budget. That's part of what we'd like to solve with an interruptible approach, assuming such an approach is possible.", "commentId": "AAAAgdW1Swc", "fileTitle": "Preemption for 60 FPS (PUBLICLY SHARED)", "status": "open", "anchor": "kix.3hq435oq7p65", "author": {"kind": "drive#user", "displayName": "Dan Field", "picture": {"url": "//lh3.googleusercontent.com/a-/ACNPEu_TWOY1znasd7yvOYbKcBxplpbC4FTpueY9T0U-=s50-c-k-no"}, "isAuthenticatedUser": false}, "createdDate": "2022-09-21T04:03:57.720Z", "deleted": false, "fileId": "sqJrz_YxIZFld_YCuSwsWcQ", "context": {"value": "exactly one widget in one frame", "type": "text/html"}, "htmlContent": "Layout for a single widget can easily blow through frame budget. That&#39;s part of what we&#39;d like to solve with an interruptible approach, assuming such an approach is possible.", "modifiedDate": "2022-09-28T23:31:54.998Z", "replies": [{"replyId": "AAAAgdW1Sww", "author": {"picture": {"url": "//lh3.googleusercontent.com/a/ALm5wu0cL7eQsTtaFybjJPIsXTlzlMMNQYM3jO2T_3lL=s50-c-k-no"}, "displayName": "Ch Tom", "kind": "drive#user", "isAuthenticatedUser": true}, "modifiedDate": "2022-09-21T04:13:53.415Z", "deleted": false, "htmlContent": "Hmm do you mean one single <i>leaf</i> widget?\u00a0<br><br>Indeed that is also very simple: I am proposing adding `if (timeout) preemptRender()` at the beginning of each RenderObject.layout.<br><br>Now, we can add more. Say, for YourHeavyRenderObject.performLayout() function, add 10 of such `if timeout preemptRender`", "content": "Hmm do you mean one single _leaf_ widget?\u00a0\n\nIndeed that is also very simple: I am proposing adding `if (timeout) preemptRender()` at the beginning of each RenderObject.layout.\n\nNow, we can add more. Say, for YourHeavyRenderObject.performLayout() function, add 10 of such `if timeout preemptRender`", "createdDate": "2022-09-21T04:13:53.415Z", "kind": "drive#commentReply"}, {"author": {"kind": "drive#user", "picture": {"url": "//lh3.googleusercontent.com/a-/ACNPEu_TWOY1znasd7yvOYbKcBxplpbC4FTpueY9T0U-=s50-c-k-no"}, "isAuthenticatedUser": false, "displayName": "Dan Field"}, "deleted": false, "htmlContent": "I&#39;m saying that a <i>single</i> layout function might take too long and your preempt call will come too late.", "replyId": "AAAAhGPCXpY", "content": "I'm saying that a _single_ layout function might take too long and your preempt call will come too late.", "modifiedDate": "2022-09-28T23:21:57.199Z", "createdDate": "2022-09-28T23:21:57.199Z", "kind": "drive#commentReply"}, {"modifiedDate": "2022-09-28T23:31:54.998Z", "createdDate": "2022-09-28T23:31:54.998Z", "kind": "drive#commentReply", "author": {"picture": {"url": "//lh3.googleusercontent.com/a/ALm5wu0cL7eQsTtaFybjJPIsXTlzlMMNQYM3jO2T_3lL=s50-c-k-no"}, "displayName": "Ch Tom", "isAuthenticatedUser": true, "kind": "drive#user"}, "deleted": false, "replyId": "AAAAhGPCXps", "htmlContent": "Just add maybePreemptRender to that <i>single</i> layout function. For example:<br><br>class VeryHeavySingleLayout extends RenderObject {<br>void performLayout() {<br>compute_heavy_things_part_1;<br>maybePreemptRender();<br>compute_heavy_things_part_2;<br>maybePreemptRender();<br>...<br>compute_heavy_things_part_5;<br>maybePreemptRender();<br>}<br>}", "content": "Just add maybePreemptRender to that _single_ layout function. For example:\n\nclass VeryHeavySingleLayout extends RenderObject {\nvoid performLayout() {\ncompute_heavy_things_part_1;\nmaybePreemptRender();\ncompute_heavy_things_part_2;\nmaybePreemptRender();\n...\ncompute_heavy_things_part_5;\nmaybePreemptRender();\n}\n}"}]}, {"author": {"displayName": "Jonah Williams", "kind": "drive#user", "picture": {"url": "//lh3.googleusercontent.com/a-/ACNPEu_UOepEEYlAoe3bbsW9eVSdAugJjAG2qAv6Y6ie5w=s50-c-k-no"}, "isAuthenticatedUser": false}, "fileTitle": "Preemption for 60 FPS (PUBLICLY SHARED)", "commentId": "AAAAgdW1Sug", "kind": "drive#comment", "modifiedDate": "2022-09-21T01:31:57.627Z", "replies": [{"deleted": false, "content": "We should fake the meaning of \"time\" in this proposal as well. For example, we may provide a variable called `preemptStrategy`:\n\n```\nabstract class PreemptStrategy {\nbool shouldWePreemptNow();\n}\u00a0\n```\n\nand call it in place of \"checking whether 15 ms has passed\".\n\nThen, when testing, we are in full control. For example, we can disable the whole preempt. We can decide to preempt at a specific RenderObject we like to test. etc", "modifiedDate": "2022-09-21T01:23:19.756Z", "kind": "drive#commentReply", "htmlContent": "We should fake the meaning of &quot;time&quot; in this proposal as well. For example, we may provide a variable called `preemptStrategy`:<br><br>```<br>abstract class PreemptStrategy {<br>bool shouldWePreemptNow();<br>}\u00a0<br>```<br><br>and call it in place of &quot;checking whether 15 ms has passed&quot;.<br><br>Then, when testing, we are in full control. For example, we can disable the whole preempt. We can decide to preempt at a specific RenderObject we like to test. etc", "author": {"displayName": "Ch Tom", "picture": {"url": "//lh3.googleusercontent.com/a/ALm5wu0cL7eQsTtaFybjJPIsXTlzlMMNQYM3jO2T_3lL=s50-c-k-no"}, "kind": "drive#user", "isAuthenticatedUser": true}, "createdDate": "2022-09-21T01:23:19.756Z", "replyId": "AAAAgdW1Sus"}, {"kind": "drive#commentReply", "createdDate": "2022-09-21T01:24:34.176Z", "htmlContent": "Seems reasonable. FWIW, the amount of time available will vary per platform, and in the case of devices with dynamic refresh rates it may even vary frame to frame. I believe we should know the approximate target time for each frame when it starts though", "deleted": false, "replyId": "AAAAgdW1Su4", "author": {"picture": {"url": "//lh3.googleusercontent.com/a-/ACNPEu_UOepEEYlAoe3bbsW9eVSdAugJjAG2qAv6Y6ie5w=s50-c-k-no"}, "isAuthenticatedUser": false, "displayName": "Jonah Williams", "kind": "drive#user"}, "content": "Seems reasonable. FWIW, the amount of time available will vary per platform, and in the case of devices with dynamic refresh rates it may even vary frame to frame. I believe we should know the approximate target time for each frame when it starts though", "modifiedDate": "2022-09-21T01:24:34.176Z"}, {"author": {"picture": {"url": "//lh3.googleusercontent.com/a/ALm5wu0cL7eQsTtaFybjJPIsXTlzlMMNQYM3jO2T_3lL=s50-c-k-no"}, "displayName": "Ch Tom", "kind": "drive#user", "isAuthenticatedUser": true}, "createdDate": "2022-09-21T01:27:57.841Z", "htmlContent": "Agree, and that should be fetchable from some kind of platform APIs. I am saying 15ms or 16.6ms just because it is simple to explain :)", "replyId": "AAAAgdW1SvA", "kind": "drive#commentReply", "modifiedDate": "2022-09-21T01:27:57.841Z", "content": "Agree, and that should be fetchable from some kind of platform APIs. I am saying 15ms or 16.6ms just because it is simple to explain :)", "deleted": false}, {"kind": "drive#commentReply", "modifiedDate": "2022-09-21T01:31:57.627Z", "author": {"isAuthenticatedUser": false, "kind": "drive#user", "displayName": "Jonah Williams", "picture": {"url": "//lh3.googleusercontent.com/a-/ACNPEu_UOepEEYlAoe3bbsW9eVSdAugJjAG2qAv6Y6ie5w=s50-c-k-no"}}, "deleted": false, "replyId": "AAAAgdW1SvQ", "content": "Yes, understood! :)", "createdDate": "2022-09-21T01:31:57.627Z", "htmlContent": "Yes, understood! :)"}], "anchor": "kix.689wjxd44n63", "fileId": "sqJrz_YxIZFld_YCuSwsWcQ", "createdDate": "2022-09-21T01:20:49.234Z", "htmlContent": "The flutter test framework generally allows developers to elapsed\u00a0arbitrary amounts of time with fake async usage. This is intentional to ensure that unit tests can be reasonably deterministic.<br><br>It would be massively breaking for unit tests to take a different number of frames to reach the same conclusion, depending on the speed of the host hardware.", "content": "The flutter test framework generally allows developers to elapsed\u00a0arbitrary amounts of time with fake async usage. This is intentional to ensure that unit tests can be reasonably deterministic.\n\nIt would be massively breaking for unit tests to take a different number of frames to reach the same conclusion, depending on the speed of the host hardware.", "status": "open", "context": {"value": "Enhance flutter testing package so it understands that, one \u201ctester.pump\u201d can result in multiple rasterized frames", "type": "text/html"}, "deleted": false}, {"replies": [{"kind": "drive#commentReply", "author": {"picture": {"url": "//lh3.googleusercontent.com/a/ALm5wu0cL7eQsTtaFybjJPIsXTlzlMMNQYM3jO2T_3lL=s50-c-k-no"}, "isAuthenticatedUser": true, "displayName": "Ch Tom", "kind": "drive#user"}, "modifiedDate": "2022-09-21T01:23:58.886Z", "replyId": "AAAAgdW1Suw", "deleted": false, "content": "Sure. I will do that in a minute.", "htmlContent": "Sure. I will do that in a minute.", "createdDate": "2022-09-21T01:23:58.886Z"}], "content": "It might be worth contrasting this approach with keframe, or elaborating on what problems this solves that keframe cannot", "context": {"type": "text/html", "value": "keframe"}, "status": "open", "modifiedDate": "2022-09-21T01:23:58.886Z", "htmlContent": "It might be worth contrasting this approach with keframe, or elaborating on what problems this solves that keframe cannot", "anchor": "kix.5ikg067yu104", "fileId": "sqJrz_YxIZFld_YCuSwsWcQ", "deleted": false, "fileTitle": "Preemption for 60 FPS (PUBLICLY SHARED)", "author": {"kind": "drive#user", "displayName": "Jonah Williams", "picture": {"url": "//lh3.googleusercontent.com/a-/ACNPEu_UOepEEYlAoe3bbsW9eVSdAugJjAG2qAv6Y6ie5w=s50-c-k-no"}, "isAuthenticatedUser": false}, "commentId": "AAAAgdW1SuQ", "createdDate": "2022-09-21T01:17:55.051Z", "kind": "drive#comment"}, {"deleted": false, "htmlContent": "If we stop rendering based on time elapsed at an arbitrary RO, there is a risk we end up with a UI that makes no sense. i.e. we could get buttons with no labels or half filled in text. I&#39;d be concerned that without a developer making an intentional choice of where to stop rendering, we&#39;d be worse off than if we janked and took longer to render", "kind": "drive#comment", "createdDate": "2022-09-21T01:16:01.875Z", "commentId": "AAAAgdW1SuI", "context": {"type": "text/html", "value": "Raster thread renders that layer tree as usual, so we see beautiful things on screen."}, "author": {"picture": {"url": "//lh3.googleusercontent.com/a-/ACNPEu_UOepEEYlAoe3bbsW9eVSdAugJjAG2qAv6Y6ie5w=s50-c-k-no"}, "isAuthenticatedUser": false, "displayName": "Jonah Williams", "kind": "drive#user"}, "status": "open", "fileTitle": "Preemption for 60 FPS (PUBLICLY SHARED)", "modifiedDate": "2022-09-21T01:21:19.125Z", "content": "If we stop rendering based on time elapsed at an arbitrary RO, there is a risk we end up with a UI that makes no sense. i.e. we could get buttons with no labels or half filled in text. I'd be concerned that without a developer making an intentional choice of where to stop rendering, we'd be worse off than if we janked and took longer to render", "anchor": "kix.2wvur2vnp59j", "fileId": "sqJrz_YxIZFld_YCuSwsWcQ", "replies": [{"deleted": false, "replyId": "AAAAgdW1Suc", "createdDate": "2022-09-21T01:19:56.363Z", "kind": "drive#commentReply", "modifiedDate": "2022-09-21T01:19:56.363Z", "htmlContent": "Well we are using the <i>previous fully</i> rendered UI + modifications in preemptModifyLayer. We will never see half filled UI!", "content": "Well we are using the _previous fully_ rendered UI + modifications in preemptModifyLayer. We will never see half filled UI!", "author": {"displayName": "Ch Tom", "kind": "drive#user", "isAuthenticatedUser": true, "picture": {"url": "//lh3.googleusercontent.com/a/ALm5wu0cL7eQsTtaFybjJPIsXTlzlMMNQYM3jO2T_3lL=s50-c-k-no"}}}, {"replyId": "AAAAgdW1Suk", "content": "Indeed, imagine the whole proposal like this: We are still running the janky slow UI that is less than 60FPS. But, once in a while, we \"secretly\" flush old layer tree + some preemptModifyLayer modifications to the screen.", "createdDate": "2022-09-21T01:21:19.125Z", "author": {"isAuthenticatedUser": true, "displayName": "Ch Tom", "picture": {"url": "//lh3.googleusercontent.com/a/ALm5wu0cL7eQsTtaFybjJPIsXTlzlMMNQYM3jO2T_3lL=s50-c-k-no"}, "kind": "drive#user"}, "htmlContent": "Indeed, imagine the whole proposal like this: We are still running the janky slow UI that is less than 60FPS. But, once in a while, we &quot;secretly&quot; flush old layer tree + some preemptModifyLayer modifications to the screen.", "modifiedDate": "2022-09-21T01:21:19.125Z", "kind": "drive#commentReply", "deleted": false}]}, {"htmlContent": "If we can stop rendering at any point, how do we resolve the sizes of render objects that depend on their children?<br><br>What about something like a layout builder? If we pre-empted layout then we may not actually be able to finish building?", "fileTitle": "Preemption for 60 FPS (PUBLICLY SHARED)", "fileId": "sqJrz_YxIZFld_YCuSwsWcQ", "status": "open", "modifiedDate": "2022-09-21T04:18:05.939Z", "author": {"isAuthenticatedUser": false, "displayName": "Jonah Williams", "picture": {"url": "//lh3.googleusercontent.com/a-/ACNPEu_UOepEEYlAoe3bbsW9eVSdAugJjAG2qAv6Y6ie5w=s50-c-k-no"}, "kind": "drive#user"}, "deleted": false, "kind": "drive#comment", "anchor": "kix.rdgonu12lo0f", "commentId": "AAAAgdW1SuE", "replies": [{"createdDate": "2022-09-21T01:19:00.455Z", "htmlContent": "We do not resolve sizes. Indeed, we are using the <i>previous fully</i> rendered UI (plus modifications in preemptModifyLayer).", "kind": "drive#commentReply", "modifiedDate": "2022-09-21T01:19:08.883Z", "deleted": false, "content": "We do not resolve sizes. Indeed, we are using the _previous fully_ rendered UI (plus modifications in preemptModifyLayer).", "author": {"displayName": "Ch Tom", "picture": {"url": "//lh3.googleusercontent.com/a/ALm5wu0cL7eQsTtaFybjJPIsXTlzlMMNQYM3jO2T_3lL=s50-c-k-no"}, "kind": "drive#user", "isAuthenticatedUser": true}, "replyId": "AAAAgdW1SuY"}, {"content": "It seems like that would only work if the previous UI was quite similar to the current UI, but that may not be the case.\n\nHow do you connect the current render object with the previous UI? The ROs are stateful objects, the only stable representation may be the old layer tree.", "kind": "drive#commentReply", "replyId": "AAAAgdW1Suo", "author": {"picture": {"url": "//lh3.googleusercontent.com/a-/ACNPEu_UOepEEYlAoe3bbsW9eVSdAugJjAG2qAv6Y6ie5w=s50-c-k-no"}, "isAuthenticatedUser": false, "kind": "drive#user", "displayName": "Jonah Williams"}, "deleted": false, "createdDate": "2022-09-21T01:22:26.962Z", "modifiedDate": "2022-09-21T01:22:26.962Z", "htmlContent": "It seems like that would only work if the previous UI was quite similar to the current UI, but that may not be the case.<br><br>How do you connect the current render object with the previous UI? The ROs are stateful objects, the only stable representation may be the old layer tree."}, {"modifiedDate": "2022-09-21T01:26:55.990Z", "replyId": "AAAAgdW1Su8", "author": {"kind": "drive#user", "displayName": "Ch Tom", "picture": {"url": "//lh3.googleusercontent.com/a/ALm5wu0cL7eQsTtaFybjJPIsXTlzlMMNQYM3jO2T_3lL=s50-c-k-no"}, "isAuthenticatedUser": true}, "kind": "drive#commentReply", "createdDate": "2022-09-21T01:26:55.990Z", "htmlContent": "I am mainly thinking about janks in animations. The examples - progress indicator, scrolling listview, enter page transition, all are examples.<br><br>If your previous UI does not look similar to current, it is also OK. My proposal is just like, &quot;originally\u00a0the UI is janky, now we add some extra frames into its normal frames&quot;.<br><br>Anyway they can always disable it by a simple flag in widgets.<br><br>When flushing ui during animation, we just provide (old + minor modified) layer tree. We do not touch RO indeed.", "deleted": false, "content": "I am mainly thinking about janks in animations. The examples - progress indicator, scrolling listview, enter page transition, all are examples.\n\nIf your previous UI does not look similar to current, it is also OK. My proposal is just like, \"originally\u00a0the UI is janky, now we add some extra frames into its normal frames\".\n\nAnyway they can always disable it by a simple flag in widgets.\n\nWhen flushing ui during animation, we just provide (old + minor modified) layer tree. We do not touch RO indeed."}, {"htmlContent": "What I mean is - how do you detect that the previous UI is not like the current UI? Its OK if this isn&#39;t a performance improvement for that case, but I don&#39;t see how you would actually determine that it was &quot;Safe&quot; to use an old layer tree", "author": {"isAuthenticatedUser": false, "kind": "drive#user", "displayName": "Jonah Williams", "picture": {"url": "//lh3.googleusercontent.com/a-/ACNPEu_UOepEEYlAoe3bbsW9eVSdAugJjAG2qAv6Y6ie5w=s50-c-k-no"}}, "content": "What I mean is - how do you detect that the previous UI is not like the current UI? Its OK if this isn't a performance improvement for that case, but I don't see how you would actually determine that it was \"Safe\" to use an old layer tree", "replyId": "AAAAgdW1SvU", "createdDate": "2022-09-21T01:33:54.168Z", "deleted": false, "modifiedDate": "2022-09-21T01:33:54.168Z", "kind": "drive#commentReply"}, {"modifiedDate": "2022-09-21T01:36:30.982Z", "content": "It is always safe. Because we are just \"inserting\" extra frames into the plain old frames!\n\nFor example, suppose it originally runs at 10 fps. Now, between frame 1 and frame 2, we insert frame 1a,1b,1c, ..., which is very alike frame 1 except for minor modifications (such as one OffsetLayer.offset).\n\nIf the users find this UI weird in their special case, they can also choose to disable surely.", "author": {"picture": {"url": "//lh3.googleusercontent.com/a/ALm5wu0cL7eQsTtaFybjJPIsXTlzlMMNQYM3jO2T_3lL=s50-c-k-no"}, "displayName": "Ch Tom", "kind": "drive#user", "isAuthenticatedUser": true}, "deleted": false, "htmlContent": "It is always safe. Because we are just &quot;inserting&quot; extra frames into the plain old frames!<br><br>For example, suppose it originally runs at 10 fps. Now, between frame 1 and frame 2, we insert frame 1a,1b,1c, ..., which is very alike frame 1 except for minor modifications (such as one OffsetLayer.offset).<br><br>If the users find this UI weird in their special case, they can also choose to disable surely.", "replyId": "AAAAgdW1Svc", "createdDate": "2022-09-21T01:36:30.982Z", "kind": "drive#commentReply"}, {"replyId": "AAAAgdW1Sws", "author": {"picture": {"url": "//lh3.googleusercontent.com/a-/ACNPEu_TWOY1znasd7yvOYbKcBxplpbC4FTpueY9T0U-=s50-c-k-no"}, "kind": "drive#user", "displayName": "Dan Field", "isAuthenticatedUser": false}, "deleted": false, "htmlContent": "This needs a lot more details about how you would sensibly interrupt and restart layout at a meaningful point.", "modifiedDate": "2022-09-21T04:05:58.504Z", "kind": "drive#commentReply", "content": "This needs a lot more details about how you would sensibly interrupt and restart layout at a meaningful point.", "createdDate": "2022-09-21T04:05:58.504Z"}, {"content": "The proposal do not interrupt, neither restart. It just calls a function (the preemptRender).\n\nNot sure but maybe you have the same understanding as @JonahWilliams? This comment may be helpful:\u00a0https://discord.com/channels/608014603317936148/608021234516754444/1021963804747255929", "author": {"picture": {"url": "//lh3.googleusercontent.com/a/ALm5wu0cL7eQsTtaFybjJPIsXTlzlMMNQYM3jO2T_3lL=s50-c-k-no"}, "kind": "drive#user", "isAuthenticatedUser": true, "displayName": "Ch Tom"}, "kind": "drive#commentReply", "htmlContent": "The proposal do not interrupt, neither restart. It just calls a function (the preemptRender).<br><br>Not sure but maybe you have the same understanding as @JonahWilliams? This comment may be helpful:\u00a0<a href=\"https://www.google.com/url?q=https://discord.com/channels/608014603317936148/608021234516754444/1021963804747255929&amp;sa=D&amp;source=docs&amp;ust=1665978869288408&amp;usg=AOvVaw0RfgHKv_22KGy1MJjwnKV-\" data-rawHref=\"https://discord.com/channels/608014603317936148/608021234516754444/1021963804747255929\" target=\"_blank\">https://discord.com/channels/608014603317936148/608021234516754444/1021963804747255929</a>", "createdDate": "2022-09-21T04:18:05.939Z", "modifiedDate": "2022-09-21T04:18:05.939Z", "replyId": "AAAAgdW1Sw8", "deleted": false}], "content": "If we can stop rendering at any point, how do we resolve the sizes of render objects that depend on their children?\n\nWhat about something like a layout builder? If we pre-empted layout then we may not actually be able to finish building?", "createdDate": "2022-09-21T01:14:35.939Z", "context": {"type": "text/html", "value": "Then it realizes time has up (say, 15ms has come), when layout() the 2nd widget. Then it calls preemptRaster() (a dart function)."}}], "nextLink": "https://www.googleapis.com/drive/v2/files/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/comments?pageToken=MjA%3D&alt=json", "nextPageToken": "MjA=", "kind": "drive#commentList", "selfLink": "https://www.googleapis.com/drive/v2/files/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/comments?alt=json"}}