{"source": "github", "metadata": {"org": "flutter", "repo": "flutter", "issue": 113927}, "content": {"author": {"login": "fzyzcjy"}, "body": "*NOTE: I am still doing experiments about this. Will update more results soon.*\r\n\r\nConsider the following example code. Code with \"case A\" occupies 2.5GB memory, while \"case B\" is 4.0GB memory.\r\n\r\n<details>\r\n\r\n```dart\r\nclass C {\r\n  int? a;\r\n  int? b;\r\n\r\n  // int get computed => a.hashCode; // case A\r\n  int get computed => a.hashCode ^ b.hashCode; // case B\r\n}\r\n\r\nFuture<void> main() async {\r\n  final arr = <C>[];\r\n  for (var i = 0; i < 100000000; ++i) {\r\n    arr.add(C()\r\n      ..a = 42\r\n      ..b = 100);\r\n  }\r\n  print('hash=${Object.hashAll(arr.map((e) => e.computed))}');\r\n\r\n  print('sleep...');\r\n  await Future<void>.delayed(const Duration(seconds: 10000));\r\n}\r\n```\r\n\r\n</details>\r\n\r\nTherefore, we know that, a field does not occupy memory if there is no read/write to it. For example, the field `b` in case A is never read, so Dart compiler seems so smart that it knows it can be eliminated and no memory is allocated for that. By the way, `b` is *written* even in case A, but seems memory is not allocated as long as it is not read. This agrees with common sense (but since I am not compiler expert, feel free to correct me if I am wrong!).\r\n\r\nFor fields inside Flutter that is merely used for debug, they are usually accessed inside an `assert(() { ... }());` block. That is great, because if *each and every* field access are inside `assert`, those code will be eliminated in release build, and by discussions above, we will not pay memory for those *debug* fields.\r\n\r\nHowever, `AnimationController.debugLabel` does not seem to follow this. Inside `AnimationController.toStringDetails`, it uses `debugLabel` field *without* being inside a `assert` block. Therefore, IMHO, we will be paying the memory of debugLabel even if we never use that in runtime.\r\n\r\nAs for why `toStringDetails` is guaranteed to be called, it is simple: `Animation.toString` calls that `toStringDetails`, and we know `toString` will not be tree shaken out.\r\n\r\n## Pre-launch Checklist\r\n\r\n- [x] I read the [Contributor Guide] and followed the process outlined there for submitting PRs.\r\n- [x] I read the [Tree Hygiene] wiki page, which explains my responsibilities.\r\n- [x] I read and followed the [Flutter Style Guide], including [Features we expect every widget to implement].\r\n- [x] I signed the [CLA].\r\n- [ ] I listed at least one issue that this PR fixes in the description above.\r\n- [x] I updated/added relevant documentation (doc comments with `///`).\r\n- [ ] I added new tests to check the change I am making, or this PR is [test-exempt].\r\n- [ ] All existing and new tests are passing.\r\n\r\nIf you need help, consider asking for advice on the #hackers-new channel on [Discord].\r\n\r\n<!-- Links -->\r\n[Contributor Guide]: https://github.com/flutter/flutter/wiki/Tree-hygiene#overview\r\n[Tree Hygiene]: https://github.com/flutter/flutter/wiki/Tree-hygiene\r\n[test-exempt]: https://github.com/flutter/flutter/wiki/Tree-hygiene#tests\r\n[Flutter Style Guide]: https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo\r\n[Features we expect every widget to implement]: https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#features-we-expect-every-widget-to-implement\r\n[CLA]: https://cla.developers.google.com/\r\n[flutter/tests]: https://github.com/flutter/tests\r\n[breaking change policy]: https://github.com/flutter/flutter/wiki/Tree-hygiene#handling-breaking-changes\r\n[Discord]: https://github.com/flutter/flutter/wiki/Chat\r\n", "comments": [{"id": "IC_kwDOAeUeuM5MzPOj", "author": {"login": "flutter-dashboard"}, "authorAssociation": "NONE", "body": "It looks like this pull request may not have tests. Please make sure to add tests before merging. If you need [an exemption](https://github.com/flutter/flutter/wiki/Tree-hygiene#tests) to this rule, contact Hixie on the #hackers channel in [Chat](https://github.com/flutter/flutter/wiki/Chat) (don't just cc him here, he won't see it! *He's on Discord!*).\n\nIf you are not sure if you need tests, consider this rule of thumb: the purpose of a test is to make sure someone doesn't accidentally revert the fix. Ask yourself, **is there anything in your PR that you feel it is important we not accidentally revert back to how it was before your fix?**\n\n__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/wiki/Tree-hygiene#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.", "createdAt": "2022-10-24T06:49:06Z", "includesCreatedEdit": false, "isMinimized": false, "minimizedReason": "", "reactionGroups": [], "url": "https://github.com/flutter/flutter/pull/113927#issuecomment-1288500131"}, {"id": "IC_kwDOAeUeuM5MzZ8z", "author": {"login": "flutter-dashboard"}, "authorAssociation": "NONE", "body": "This pull request has been changed to a draft. The currently pending flutter-gold status will not be able to resolve until a new commit is pushed or the change is marked ready for review again.\n\nFor more guidance, visit [Writing a golden file test for `package:flutter`](https://github.com/flutter/flutter/wiki/Writing-a-golden-file-test-for-package:flutter).\n\n__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/wiki/Tree-hygiene#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.\n\n", "createdAt": "2022-10-24T07:31:03Z", "includesCreatedEdit": false, "isMinimized": false, "minimizedReason": "", "reactionGroups": [], "url": "https://github.com/flutter/flutter/pull/113927#issuecomment-1288544051"}], "createdAt": "2022-10-24T06:49:03Z", "title": "Fix wasted memory caused by debug fields"}}