{"source": "github", "metadata": {"org": "flutter", "repo": "flutter", "issue": 114468}, "content": {"author": {"login": "fzyzcjy"}, "body": "~~(This is WIP, since I want to see whether this change will make regression test fail or not)~~ ready for review\r\n\r\nConsider this simple example\r\n\r\n```dart\r\nimport 'package:flutter/scheduler.dart';\r\nimport 'package:flutter_test/flutter_test.dart';\r\n\r\nvoid main() {\r\n  testWidgets('addTearDown should work', (tester) async { // <-- THIS FAILS\r\n    timeDilation = 2;\r\n    addTearDown(() => timeDilation = 1);\r\n  });\r\n\r\n  testWidgets('directly reset should work', (tester) async { // <-- this is ok\r\n    timeDilation = 2;\r\n    timeDilation = 1;\r\n  });\r\n}\r\n```\r\n\r\nIt yields:\r\n\r\n<details>\r\n\r\n```shell\r\n/Volumes/MyExternal/ExternalRefCode/flutter/bin/flutter --no-color test --machine --start-paused test/a.dart\r\nTesting started at 09:50 ...\r\n\r\n\u2550\u2550\u2561 EXCEPTION CAUGHT BY FLUTTER TEST FRAMEWORK \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\r\nThe following assertion was thrown running a test:\r\nThe timeDilation was changed and not reset by the test.\r\n\r\nWhen the exception was thrown, this was the stack:\r\n#0      SchedulerBinding.debugAssertNoTimeDilation.<anonymous closure> (package:flutter/src/scheduler/binding.dart:662:9)\r\n#1      SchedulerBinding.debugAssertNoTimeDilation (package:flutter/src/scheduler/binding.dart:665:6)\r\n#2      TestWidgetsFlutterBinding._verifyInvariants (package:flutter_test/src/binding.dart:968:12)\r\n#3      AutomatedTestWidgetsFlutterBinding._verifyInvariants (package:flutter_test/src/binding.dart:1433:11)\r\n#4      TestWidgetsFlutterBinding._runTestBody (package:flutter_test/src/binding.dart:952:7)\r\n<asynchronous suspension>\r\n\r\nThe test description was:\r\n  addTearDown should work\r\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\r\n\r\nTest failed. See exception logs above.\r\nThe test description was: addTearDown should work\r\n```\r\n\r\n</details>\r\n\r\nIn other words, we do not allow resetting configurations in `addTearDown` (or `tearDown`). Instead, we must do it at the end of the closure.\r\n\r\nIMHO resetting things in `addTearDown`/`tearDown` is a commonly seen practice. For example, `window.physicalSize` can be reset in a tear-down function, and even Flutter test code inside the framework does so a lot of times. A quick search also shows that, such as [this example](https://stackoverflow.com/questions/6854658/explain-the-setup-and-teardown-python-methods-used-in-test-cases), resetting in tear down holds even for other tests such as Python.\r\n\r\nBy disallowing so, Flutter devs may have a bit more friction when learning Flutter, since they may firstly write down code that follows common practice, realizing it does not work, and change it.\r\n\r\nIt is also inconsistent with other parts of the Flutter. As mentioned above, `window.physicalSize` can be reset in a tear-down function, but things like timeDilation cannot.\r\n\r\nThe PR can also make code a bit simpler. Originally, whenever writing setup code (e.g. `timeDilation=2`), we must put tear down code at the end of the function, and wrap with a try-finally. But with the PR, it can be put near the setup code, so it is a bit cleaner for code readers. By the way, this is also a bit like the \"defer\" keyword in go - something like `configure(); defer reset(); other_functions()` will let the reset be executed last.\r\n\r\nIn some cases, this seems to simplify code a lot. For example, in https://github.com/flutter/flutter/pull/113830#discussion_r1005887028, I have to introduce a weird timeDilation reset that seems to have no pairing timeDilation modification (and cause confusion of readers - even code reviewers). With this PR, the reset will be put to the next line of modification, so it is clear.\r\n\r\n## Pre-launch Checklist\r\n\r\n- [x] I read the [Contributor Guide] and followed the process outlined there for submitting PRs.\r\n- [x] I read the [Tree Hygiene] wiki page, which explains my responsibilities.\r\n- [x] I read and followed the [Flutter Style Guide], including [Features we expect every widget to implement].\r\n- [x] I signed the [CLA].\r\n- [x] I listed at least one issue that this PR fixes in the description above.\r\n- [x] I updated/added relevant documentation (doc comments with `///`).\r\n- [ ] I added new tests to check the change I am making, or this PR is [test-exempt].\r\n- [ ] All existing and new tests are passing.\r\n\r\nIf you need help, consider asking for advice on the #hackers-new channel on [Discord].\r\n\r\n<!-- Links -->\r\n[Contributor Guide]: https://github.com/flutter/flutter/wiki/Tree-hygiene#overview\r\n[Tree Hygiene]: https://github.com/flutter/flutter/wiki/Tree-hygiene\r\n[test-exempt]: https://github.com/flutter/flutter/wiki/Tree-hygiene#tests\r\n[Flutter Style Guide]: https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo\r\n[Features we expect every widget to implement]: https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#features-we-expect-every-widget-to-implement\r\n[CLA]: https://cla.developers.google.com/\r\n[flutter/tests]: https://github.com/flutter/tests\r\n[breaking change policy]: https://github.com/flutter/flutter/wiki/Tree-hygiene#handling-breaking-changes\r\n[Discord]: https://github.com/flutter/flutter/wiki/Chat\r\n", "comments": [{"id": "IC_kwDOAeUeuM5OcIzT", "author": {"login": "goderbauer"}, "authorAssociation": "MEMBER", "body": "> (This is WIP, since I want to see whether this change will make regression test fail or not)\r\n\r\nDo you still have further plans for this? Or did it achieve its goal and can be closed?", "createdAt": "2022-11-15T23:16:45Z", "includesCreatedEdit": false, "isMinimized": false, "minimizedReason": "", "reactionGroups": [], "url": "https://github.com/flutter/flutter/pull/114468#issuecomment-1315998931"}, {"id": "IC_kwDOAeUeuM5OcLGZ", "author": {"login": "fzyzcjy"}, "authorAssociation": "CONTRIBUTOR", "body": "Oh it is ready for review", "createdAt": "2022-11-15T23:23:54Z", "includesCreatedEdit": false, "isMinimized": false, "minimizedReason": "", "reactionGroups": [], "url": "https://github.com/flutter/flutter/pull/114468#issuecomment-1316008345"}, {"id": "IC_kwDOAeUeuM5OcLKD", "author": {"login": "flutter-dashboard"}, "authorAssociation": "NONE", "body": "It looks like this pull request may not have tests. Please make sure to add tests before merging. If you need [an exemption](https://github.com/flutter/flutter/wiki/Tree-hygiene#tests) to this rule, contact Hixie on the #hackers channel in [Chat](https://github.com/flutter/flutter/wiki/Chat) (don't just cc him here, he won't see it! *He's on Discord!*).\n\nIf you are not sure if you need tests, consider this rule of thumb: the purpose of a test is to make sure someone doesn't accidentally revert the fix. Ask yourself, **is there anything in your PR that you feel it is important we not accidentally revert back to how it was before your fix?**\n\n__Reviewers__: Read the [Tree Hygiene page](https://github.com/flutter/flutter/wiki/Tree-hygiene#how-to-review-code) and make sure this patch meets those guidelines before LGTMing.", "createdAt": "2022-11-15T23:24:05Z", "includesCreatedEdit": false, "isMinimized": false, "minimizedReason": "", "reactionGroups": [], "url": "https://github.com/flutter/flutter/pull/114468#issuecomment-1316008579"}, {"id": "IC_kwDOAeUeuM5OjPHG", "author": {"login": "fzyzcjy"}, "authorAssociation": "CONTRIBUTOR", "body": "Thanks :) I will modify and update it soon (no time now though)", "createdAt": "2022-11-17T00:16:58Z", "includesCreatedEdit": false, "isMinimized": false, "minimizedReason": "", "reactionGroups": [], "url": "https://github.com/flutter/flutter/pull/114468#issuecomment-1317859782"}, {"id": "IC_kwDOAeUeuM5OoeXk", "author": {"login": "pdblasi-google"}, "authorAssociation": "CONTRIBUTOR", "body": "Followup on moving the invariant verifications into an `addTearDown` (came to me at about 3AM last night...).\r\n\r\nI think if we move the invariant verifications into an `addTearDown`, we may _also_ need to move the storing of those variables (for checking the end state) that get checked into a `setUp` call. I think as it stands right now, if someone were to use `setUp` to change an invariant, it'll have a couple problems:\r\n\r\na) It won't validate that the invariant is reset after the test, since it's actually set _before_ the test\r\nb) If (after this issue is fixed) the invariant is reset via an `addTearDown` or `tearDown`, then the verifications will fail because they'll have the _changed_ value saved to check against, since it was changed before the test.", "createdAt": "2022-11-17T21:33:34Z", "includesCreatedEdit": false, "isMinimized": false, "minimizedReason": "", "reactionGroups": [], "url": "https://github.com/flutter/flutter/pull/114468#issuecomment-1319232996"}, {"id": "IC_kwDOAeUeuM5Oo25N", "author": {"login": "fzyzcjy"}, "authorAssociation": "CONTRIBUTOR", "body": "Good point! I will check that later.", "createdAt": "2022-11-17T23:16:05Z", "includesCreatedEdit": false, "isMinimized": false, "minimizedReason": "", "reactionGroups": [{"content": "THUMBS_UP", "users": {"totalCount": 1}}], "url": "https://github.com/flutter/flutter/pull/114468#issuecomment-1319333453"}, {"id": "IC_kwDOAeUeuM5O9D5J", "author": {"login": "fzyzcjy"}, "authorAssociation": "CONTRIBUTOR", "body": "Well, `tearDown` does not seem to work. I guess it is because, our addTearDown(verifyInvariants) are called *before* this user-added tearDown. Thus, even if user resets value in this tearDown, our verifications run *before* that so is not aware of it.\r\n\r\nHowever, IMHO this PR is still useful, because even if tearDown is not supported, it adds support for addTearDown, which is very frequently used.\r\n\r\n---\r\n\r\ntests:\r\n\r\n```dart\r\n    group('tearDown does not work yet', () {\r\n      tearDown(() {\r\n        timeDilation = 1;\r\n      });\r\n\r\n      testWidgets('main test inside group', (WidgetTester tester) async {\r\n        timeDilation = 2;\r\n      });\r\n    });\r\n```\r\n\r\nyields\r\n\r\n```\r\npackage:flutter/src/scheduler/binding.dart 662:9  SchedulerBinding.debugAssertNoTimeDilation.<fn>\r\npackage:flutter/src/scheduler/binding.dart 665:6  SchedulerBinding.debugAssertNoTimeDilation\r\npackage:flutter_test/src/binding.dart 971:12      TestWidgetsFlutterBinding._verifyInvariants\r\npackage:flutter_test/src/binding.dart 1436:11     AutomatedTestWidgetsFlutterBinding._verifyInvariants\r\npackage:flutter_test/src/binding.dart 950:9       TestWidgetsFlutterBinding._runTestBody.<fn>\r\n===== asynchronous gap ===========================\r\ndart:async                                        _CustomZone.registerUnaryCallback\r\npackage:flutter_test/src/binding.dart 941:9       TestWidgetsFlutterBinding._runTestBody.<fn>\r\n\r\nThe timeDilation was changed and not reset by the test.\r\n```", "createdAt": "2022-11-23T07:02:17Z", "includesCreatedEdit": true, "isMinimized": false, "minimizedReason": "", "reactionGroups": [], "url": "https://github.com/flutter/flutter/pull/114468#issuecomment-1324629577"}, {"id": "IC_kwDOAeUeuM5O9LgA", "author": {"login": "fzyzcjy"}, "authorAssociation": "CONTRIBUTOR", "body": "Hmm CI fails. I will firstly revert now", "createdAt": "2022-11-23T07:41:52Z", "includesCreatedEdit": false, "isMinimized": false, "minimizedReason": "", "reactionGroups": [], "url": "https://github.com/flutter/flutter/pull/114468#issuecomment-1324660736"}], "createdAt": "2022-11-02T01:52:26Z", "title": "Fix error when resetting configurations in tear down phase"}}